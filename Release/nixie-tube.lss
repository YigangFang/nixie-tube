
nixie-tube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000d4c  00000de0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800112  00800112  00000df2  2**0
                  ALLOC
  3 .debug_aranges 00000210  00000000  00000000  00000df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000047a  00000000  00000000  00001002  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a52  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000994  00000000  00000000  00002ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000143a  00000000  00000000  00003862  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  00004c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000076b  00000000  00000000  00004fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c8e  00000000  00000000  00005727  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  000063b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

void NixieTube::clear(word value)
{
	for (byte i = 0; i < _section_count; i++)
		_buff[i] = value;
}
   0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__dtors_end>

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__vector_16>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
  68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
  72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
  7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
  86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
  9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
  ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
  be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
  c2:	8a 03       	fmulsu	r16, r18

000000c4 <__ctors_end>:
  c4:	83 03       	fmuls	r16, r19

000000c6 <__dtors_end>:
  c6:	11 24       	eor	r1, r1
  c8:	1f be       	out	0x3f, r1	; 63
  ca:	cf ef       	ldi	r28, 0xFF	; 255
  cc:	d8 e0       	ldi	r29, 0x08	; 8
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
  d2:	11 e0       	ldi	r17, 0x01	; 1
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	ec e4       	ldi	r30, 0x4C	; 76
  da:	fd e0       	ldi	r31, 0x0D	; 13
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <.do_copy_data_start>

000000de <.do_copy_data_loop>:
  de:	05 90       	lpm	r0, Z+
  e0:	0d 92       	st	X+, r0

000000e2 <.do_copy_data_start>:
  e2:	a2 31       	cpi	r26, 0x12	; 18
  e4:	b1 07       	cpc	r27, r17
  e6:	d9 f7       	brne	.-10     	; 0xde <.do_copy_data_loop>

000000e8 <__do_clear_bss>:
  e8:	11 e0       	ldi	r17, 0x01	; 1
  ea:	a2 e1       	ldi	r26, 0x12	; 18
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
  f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
  f2:	a8 32       	cpi	r26, 0x28	; 40
  f4:	b1 07       	cpc	r27, r17
  f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	c4 ec       	ldi	r28, 0xC4	; 196
  fc:	d0 e0       	ldi	r29, 0x00	; 0
  fe:	04 c0       	rjmp	.+8      	; 0x108 <.do_global_ctors_start>

00000100 <.do_global_ctors_loop>:
 100:	22 97       	sbiw	r28, 0x02	; 2
 102:	fe 01       	movw	r30, r28
 104:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__tablejump__>

00000108 <.do_global_ctors_start>:
 108:	c2 3c       	cpi	r28, 0xC2	; 194
 10a:	d1 07       	cpc	r29, r17
 10c:	c9 f7       	brne	.-14     	; 0x100 <.do_global_ctors_loop>
 10e:	0e 94 cf 03 	call	0x79e	; 0x79e <main>
 112:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__do_global_dtors>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <malloc>:
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	bc 01       	movw	r22, r24
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	91 05       	cpc	r25, r1
 124:	10 f4       	brcc	.+4      	; 0x12a <malloc+0x10>
 126:	62 e0       	ldi	r22, 0x02	; 2
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	a0 91 26 01 	lds	r26, 0x0126
 12e:	b0 91 27 01 	lds	r27, 0x0127
 132:	ed 01       	movw	r28, r26
 134:	e0 e0       	ldi	r30, 0x00	; 0
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	21 c0       	rjmp	.+66     	; 0x180 <malloc+0x66>
 13e:	88 81       	ld	r24, Y
 140:	99 81       	ldd	r25, Y+1	; 0x01
 142:	86 17       	cp	r24, r22
 144:	97 07       	cpc	r25, r23
 146:	69 f4       	brne	.+26     	; 0x162 <malloc+0x48>
 148:	8a 81       	ldd	r24, Y+2	; 0x02
 14a:	9b 81       	ldd	r25, Y+3	; 0x03
 14c:	30 97       	sbiw	r30, 0x00	; 0
 14e:	19 f0       	breq	.+6      	; 0x156 <malloc+0x3c>
 150:	93 83       	std	Z+3, r25	; 0x03
 152:	82 83       	std	Z+2, r24	; 0x02
 154:	04 c0       	rjmp	.+8      	; 0x15e <malloc+0x44>
 156:	90 93 27 01 	sts	0x0127, r25
 15a:	80 93 26 01 	sts	0x0126, r24
 15e:	fe 01       	movw	r30, r28
 160:	34 c0       	rjmp	.+104    	; 0x1ca <malloc+0xb0>
 162:	68 17       	cp	r22, r24
 164:	79 07       	cpc	r23, r25
 166:	38 f4       	brcc	.+14     	; 0x176 <malloc+0x5c>
 168:	41 15       	cp	r20, r1
 16a:	51 05       	cpc	r21, r1
 16c:	19 f0       	breq	.+6      	; 0x174 <malloc+0x5a>
 16e:	84 17       	cp	r24, r20
 170:	95 07       	cpc	r25, r21
 172:	08 f4       	brcc	.+2      	; 0x176 <malloc+0x5c>
 174:	ac 01       	movw	r20, r24
 176:	fe 01       	movw	r30, r28
 178:	8a 81       	ldd	r24, Y+2	; 0x02
 17a:	9b 81       	ldd	r25, Y+3	; 0x03
 17c:	9c 01       	movw	r18, r24
 17e:	e9 01       	movw	r28, r18
 180:	20 97       	sbiw	r28, 0x00	; 0
 182:	e9 f6       	brne	.-70     	; 0x13e <malloc+0x24>
 184:	41 15       	cp	r20, r1
 186:	51 05       	cpc	r21, r1
 188:	a9 f1       	breq	.+106    	; 0x1f4 <malloc+0xda>
 18a:	ca 01       	movw	r24, r20
 18c:	86 1b       	sub	r24, r22
 18e:	97 0b       	sbc	r25, r23
 190:	04 97       	sbiw	r24, 0x04	; 4
 192:	08 f4       	brcc	.+2      	; 0x196 <malloc+0x7c>
 194:	ba 01       	movw	r22, r20
 196:	e0 e0       	ldi	r30, 0x00	; 0
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	2a c0       	rjmp	.+84     	; 0x1f0 <malloc+0xd6>
 19c:	8d 91       	ld	r24, X+
 19e:	9c 91       	ld	r25, X
 1a0:	11 97       	sbiw	r26, 0x01	; 1
 1a2:	84 17       	cp	r24, r20
 1a4:	95 07       	cpc	r25, r21
 1a6:	f9 f4       	brne	.+62     	; 0x1e6 <malloc+0xcc>
 1a8:	64 17       	cp	r22, r20
 1aa:	75 07       	cpc	r23, r21
 1ac:	81 f4       	brne	.+32     	; 0x1ce <malloc+0xb4>
 1ae:	12 96       	adiw	r26, 0x02	; 2
 1b0:	8d 91       	ld	r24, X+
 1b2:	9c 91       	ld	r25, X
 1b4:	13 97       	sbiw	r26, 0x03	; 3
 1b6:	30 97       	sbiw	r30, 0x00	; 0
 1b8:	19 f0       	breq	.+6      	; 0x1c0 <malloc+0xa6>
 1ba:	93 83       	std	Z+3, r25	; 0x03
 1bc:	82 83       	std	Z+2, r24	; 0x02
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <malloc+0xae>
 1c0:	90 93 27 01 	sts	0x0127, r25
 1c4:	80 93 26 01 	sts	0x0126, r24
 1c8:	fd 01       	movw	r30, r26
 1ca:	32 96       	adiw	r30, 0x02	; 2
 1cc:	4c c0       	rjmp	.+152    	; 0x266 <malloc+0x14c>
 1ce:	ca 01       	movw	r24, r20
 1d0:	86 1b       	sub	r24, r22
 1d2:	97 0b       	sbc	r25, r23
 1d4:	fd 01       	movw	r30, r26
 1d6:	e8 0f       	add	r30, r24
 1d8:	f9 1f       	adc	r31, r25
 1da:	61 93       	st	Z+, r22
 1dc:	71 93       	st	Z+, r23
 1de:	02 97       	sbiw	r24, 0x02	; 2
 1e0:	8d 93       	st	X+, r24
 1e2:	9c 93       	st	X, r25
 1e4:	40 c0       	rjmp	.+128    	; 0x266 <malloc+0x14c>
 1e6:	fd 01       	movw	r30, r26
 1e8:	82 81       	ldd	r24, Z+2	; 0x02
 1ea:	93 81       	ldd	r25, Z+3	; 0x03
 1ec:	9c 01       	movw	r18, r24
 1ee:	d9 01       	movw	r26, r18
 1f0:	10 97       	sbiw	r26, 0x00	; 0
 1f2:	a1 f6       	brne	.-88     	; 0x19c <malloc+0x82>
 1f4:	80 91 24 01 	lds	r24, 0x0124
 1f8:	90 91 25 01 	lds	r25, 0x0125
 1fc:	89 2b       	or	r24, r25
 1fe:	41 f4       	brne	.+16     	; 0x210 <malloc+0xf6>
 200:	80 91 02 01 	lds	r24, 0x0102
 204:	90 91 03 01 	lds	r25, 0x0103
 208:	90 93 25 01 	sts	0x0125, r25
 20c:	80 93 24 01 	sts	0x0124, r24
 210:	40 91 04 01 	lds	r20, 0x0104
 214:	50 91 05 01 	lds	r21, 0x0105
 218:	41 15       	cp	r20, r1
 21a:	51 05       	cpc	r21, r1
 21c:	41 f4       	brne	.+16     	; 0x22e <malloc+0x114>
 21e:	4d b7       	in	r20, 0x3d	; 61
 220:	5e b7       	in	r21, 0x3e	; 62
 222:	80 91 00 01 	lds	r24, 0x0100
 226:	90 91 01 01 	lds	r25, 0x0101
 22a:	48 1b       	sub	r20, r24
 22c:	59 0b       	sbc	r21, r25
 22e:	20 91 24 01 	lds	r18, 0x0124
 232:	30 91 25 01 	lds	r19, 0x0125
 236:	ca 01       	movw	r24, r20
 238:	82 1b       	sub	r24, r18
 23a:	93 0b       	sbc	r25, r19
 23c:	86 17       	cp	r24, r22
 23e:	97 07       	cpc	r25, r23
 240:	80 f0       	brcs	.+32     	; 0x262 <malloc+0x148>
 242:	ab 01       	movw	r20, r22
 244:	4e 5f       	subi	r20, 0xFE	; 254
 246:	5f 4f       	sbci	r21, 0xFF	; 255
 248:	84 17       	cp	r24, r20
 24a:	95 07       	cpc	r25, r21
 24c:	50 f0       	brcs	.+20     	; 0x262 <malloc+0x148>
 24e:	42 0f       	add	r20, r18
 250:	53 1f       	adc	r21, r19
 252:	50 93 25 01 	sts	0x0125, r21
 256:	40 93 24 01 	sts	0x0124, r20
 25a:	f9 01       	movw	r30, r18
 25c:	61 93       	st	Z+, r22
 25e:	71 93       	st	Z+, r23
 260:	02 c0       	rjmp	.+4      	; 0x266 <malloc+0x14c>
 262:	e0 e0       	ldi	r30, 0x00	; 0
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	cf 01       	movw	r24, r30
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <free>:
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	00 97       	sbiw	r24, 0x00	; 0
 274:	09 f4       	brne	.+2      	; 0x278 <free+0xa>
 276:	50 c0       	rjmp	.+160    	; 0x318 <free+0xaa>
 278:	ec 01       	movw	r28, r24
 27a:	22 97       	sbiw	r28, 0x02	; 2
 27c:	1b 82       	std	Y+3, r1	; 0x03
 27e:	1a 82       	std	Y+2, r1	; 0x02
 280:	a0 91 26 01 	lds	r26, 0x0126
 284:	b0 91 27 01 	lds	r27, 0x0127
 288:	10 97       	sbiw	r26, 0x00	; 0
 28a:	09 f1       	breq	.+66     	; 0x2ce <free+0x60>
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	ac 17       	cp	r26, r28
 292:	bd 07       	cpc	r27, r29
 294:	08 f1       	brcs	.+66     	; 0x2d8 <free+0x6a>
 296:	bb 83       	std	Y+3, r27	; 0x03
 298:	aa 83       	std	Y+2, r26	; 0x02
 29a:	fe 01       	movw	r30, r28
 29c:	21 91       	ld	r18, Z+
 29e:	31 91       	ld	r19, Z+
 2a0:	e2 0f       	add	r30, r18
 2a2:	f3 1f       	adc	r31, r19
 2a4:	ae 17       	cp	r26, r30
 2a6:	bf 07       	cpc	r27, r31
 2a8:	79 f4       	brne	.+30     	; 0x2c8 <free+0x5a>
 2aa:	8d 91       	ld	r24, X+
 2ac:	9c 91       	ld	r25, X
 2ae:	11 97       	sbiw	r26, 0x01	; 1
 2b0:	28 0f       	add	r18, r24
 2b2:	39 1f       	adc	r19, r25
 2b4:	2e 5f       	subi	r18, 0xFE	; 254
 2b6:	3f 4f       	sbci	r19, 0xFF	; 255
 2b8:	39 83       	std	Y+1, r19	; 0x01
 2ba:	28 83       	st	Y, r18
 2bc:	12 96       	adiw	r26, 0x02	; 2
 2be:	8d 91       	ld	r24, X+
 2c0:	9c 91       	ld	r25, X
 2c2:	13 97       	sbiw	r26, 0x03	; 3
 2c4:	9b 83       	std	Y+3, r25	; 0x03
 2c6:	8a 83       	std	Y+2, r24	; 0x02
 2c8:	41 15       	cp	r20, r1
 2ca:	51 05       	cpc	r21, r1
 2cc:	71 f4       	brne	.+28     	; 0x2ea <free+0x7c>
 2ce:	d0 93 27 01 	sts	0x0127, r29
 2d2:	c0 93 26 01 	sts	0x0126, r28
 2d6:	20 c0       	rjmp	.+64     	; 0x318 <free+0xaa>
 2d8:	12 96       	adiw	r26, 0x02	; 2
 2da:	8d 91       	ld	r24, X+
 2dc:	9c 91       	ld	r25, X
 2de:	13 97       	sbiw	r26, 0x03	; 3
 2e0:	ad 01       	movw	r20, r26
 2e2:	00 97       	sbiw	r24, 0x00	; 0
 2e4:	11 f0       	breq	.+4      	; 0x2ea <free+0x7c>
 2e6:	dc 01       	movw	r26, r24
 2e8:	d3 cf       	rjmp	.-90     	; 0x290 <free+0x22>
 2ea:	fa 01       	movw	r30, r20
 2ec:	d3 83       	std	Z+3, r29	; 0x03
 2ee:	c2 83       	std	Z+2, r28	; 0x02
 2f0:	21 91       	ld	r18, Z+
 2f2:	31 91       	ld	r19, Z+
 2f4:	e2 0f       	add	r30, r18
 2f6:	f3 1f       	adc	r31, r19
 2f8:	ce 17       	cp	r28, r30
 2fa:	df 07       	cpc	r29, r31
 2fc:	69 f4       	brne	.+26     	; 0x318 <free+0xaa>
 2fe:	88 81       	ld	r24, Y
 300:	99 81       	ldd	r25, Y+1	; 0x01
 302:	28 0f       	add	r18, r24
 304:	39 1f       	adc	r19, r25
 306:	2e 5f       	subi	r18, 0xFE	; 254
 308:	3f 4f       	sbci	r19, 0xFF	; 255
 30a:	fa 01       	movw	r30, r20
 30c:	31 83       	std	Z+1, r19	; 0x01
 30e:	20 83       	st	Z, r18
 310:	8a 81       	ldd	r24, Y+2	; 0x02
 312:	9b 81       	ldd	r25, Y+3	; 0x03
 314:	93 83       	std	Z+3, r25	; 0x03
 316:	82 83       	std	Z+2, r24	; 0x02
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <do_random>:
 31e:	a0 e0       	ldi	r26, 0x00	; 0
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	e5 e9       	ldi	r30, 0x95	; 149
 324:	f1 e0       	ldi	r31, 0x01	; 1
 326:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__prologue_saves__+0x10>
 32a:	ec 01       	movw	r28, r24
 32c:	a8 80       	ld	r10, Y
 32e:	b9 80       	ldd	r11, Y+1	; 0x01
 330:	ca 80       	ldd	r12, Y+2	; 0x02
 332:	db 80       	ldd	r13, Y+3	; 0x03
 334:	a1 14       	cp	r10, r1
 336:	b1 04       	cpc	r11, r1
 338:	c1 04       	cpc	r12, r1
 33a:	d1 04       	cpc	r13, r1
 33c:	41 f4       	brne	.+16     	; 0x34e <do_random+0x30>
 33e:	84 e2       	ldi	r24, 0x24	; 36
 340:	a8 2e       	mov	r10, r24
 342:	89 ed       	ldi	r24, 0xD9	; 217
 344:	b8 2e       	mov	r11, r24
 346:	8b e5       	ldi	r24, 0x5B	; 91
 348:	c8 2e       	mov	r12, r24
 34a:	87 e0       	ldi	r24, 0x07	; 7
 34c:	d8 2e       	mov	r13, r24
 34e:	c6 01       	movw	r24, r12
 350:	b5 01       	movw	r22, r10
 352:	2d e1       	ldi	r18, 0x1D	; 29
 354:	33 ef       	ldi	r19, 0xF3	; 243
 356:	41 e0       	ldi	r20, 0x01	; 1
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	0e 94 00 06 	call	0xc00	; 0xc00 <__divmodsi4>
 35e:	27 ea       	ldi	r18, 0xA7	; 167
 360:	31 e4       	ldi	r19, 0x41	; 65
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	0e 94 43 06 	call	0xc86	; 0xc86 <__mulsi3>
 36a:	7b 01       	movw	r14, r22
 36c:	8c 01       	movw	r16, r24
 36e:	c6 01       	movw	r24, r12
 370:	b5 01       	movw	r22, r10
 372:	2d e1       	ldi	r18, 0x1D	; 29
 374:	33 ef       	ldi	r19, 0xF3	; 243
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	50 e0       	ldi	r21, 0x00	; 0
 37a:	0e 94 00 06 	call	0xc00	; 0xc00 <__divmodsi4>
 37e:	ca 01       	movw	r24, r20
 380:	b9 01       	movw	r22, r18
 382:	2c ee       	ldi	r18, 0xEC	; 236
 384:	34 ef       	ldi	r19, 0xF4	; 244
 386:	4f ef       	ldi	r20, 0xFF	; 255
 388:	5f ef       	ldi	r21, 0xFF	; 255
 38a:	0e 94 43 06 	call	0xc86	; 0xc86 <__mulsi3>
 38e:	6e 0d       	add	r22, r14
 390:	7f 1d       	adc	r23, r15
 392:	80 1f       	adc	r24, r16
 394:	91 1f       	adc	r25, r17
 396:	97 ff       	sbrs	r25, 7
 398:	04 c0       	rjmp	.+8      	; 0x3a2 <do_random+0x84>
 39a:	61 50       	subi	r22, 0x01	; 1
 39c:	70 40       	sbci	r23, 0x00	; 0
 39e:	80 40       	sbci	r24, 0x00	; 0
 3a0:	90 48       	sbci	r25, 0x80	; 128
 3a2:	68 83       	st	Y, r22
 3a4:	79 83       	std	Y+1, r23	; 0x01
 3a6:	8a 83       	std	Y+2, r24	; 0x02
 3a8:	9b 83       	std	Y+3, r25	; 0x03
 3aa:	9b 01       	movw	r18, r22
 3ac:	ac 01       	movw	r20, r24
 3ae:	5f 77       	andi	r21, 0x7F	; 127
 3b0:	b9 01       	movw	r22, r18
 3b2:	ca 01       	movw	r24, r20
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
 3b8:	ea e0       	ldi	r30, 0x0A	; 10
 3ba:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__epilogue_restores__+0x10>

000003be <random_r>:
 3be:	0e 94 8f 01 	call	0x31e	; 0x31e <do_random>
 3c2:	08 95       	ret

000003c4 <random>:
 3c4:	86 e0       	ldi	r24, 0x06	; 6
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 8f 01 	call	0x31e	; 0x31e <do_random>
 3cc:	08 95       	ret

000003ce <srandom>:
 3ce:	60 93 06 01 	sts	0x0106, r22
 3d2:	70 93 07 01 	sts	0x0107, r23
 3d6:	80 93 08 01 	sts	0x0108, r24
 3da:	90 93 09 01 	sts	0x0109, r25
 3de:	08 95       	ret

000003e0 <_ZN9NixieTube18setBackgroundColorEh5Color>:
	{
		this->setBackgroundColor(i, color);
	}
}

void NixieTube::setBackgroundColor(byte index, Color color)
 3e0:	fc 01       	movw	r30, r24
 3e2:	86 2f       	mov	r24, r22
{
	index %= _section_count;
 3e4:	64 81       	ldd	r22, Z+4	; 0x04
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__udivmodhi4>
	_buff[index] &= 0x8fff;
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	02 80       	ldd	r0, Z+2	; 0x02
 3f6:	f3 81       	ldd	r31, Z+3	; 0x03
 3f8:	e0 2d       	mov	r30, r0
 3fa:	e8 0f       	add	r30, r24
 3fc:	f9 1f       	adc	r31, r25
 3fe:	20 81       	ld	r18, Z
 400:	31 81       	ldd	r19, Z+1	; 0x01
 402:	3f 78       	andi	r19, 0x8F	; 143
	_buff[index] |= color << 12;
 404:	94 2f       	mov	r25, r20
 406:	92 95       	swap	r25
 408:	90 7f       	andi	r25, 0xF0	; 240
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	28 2b       	or	r18, r24
 40e:	39 2b       	or	r19, r25
 410:	31 83       	std	Z+1, r19	; 0x01
 412:	20 83       	st	Z, r18
}
 414:	08 95       	ret

00000416 <_ZN9NixieTube18setBackgroundColorE5Color>:
{
	for (byte i = 0; i < _section_count; i++)
		_buff[i] = value;
}

void NixieTube::setBackgroundColor(Color color)
 416:	ef 92       	push	r14
 418:	ff 92       	push	r15
 41a:	1f 93       	push	r17
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	ec 01       	movw	r28, r24
 422:	7b 01       	movw	r14, r22
 424:	10 e0       	ldi	r17, 0x00	; 0
 426:	06 c0       	rjmp	.+12     	; 0x434 <_ZN9NixieTube18setBackgroundColorE5Color+0x1e>
{
	for (byte i = 0; i < _section_count; i++)
	{
		this->setBackgroundColor(i, color);
 428:	ce 01       	movw	r24, r28
 42a:	61 2f       	mov	r22, r17
 42c:	a7 01       	movw	r20, r14
 42e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN9NixieTube18setBackgroundColorEh5Color>
		_buff[i] = value;
}

void NixieTube::setBackgroundColor(Color color)
{
	for (byte i = 0; i < _section_count; i++)
 432:	1f 5f       	subi	r17, 0xFF	; 255
 434:	8c 81       	ldd	r24, Y+4	; 0x04
 436:	18 17       	cp	r17, r24
 438:	b8 f3       	brcs	.-18     	; 0x428 <_ZN9NixieTube18setBackgroundColorE5Color+0x12>
	{
		this->setBackgroundColor(i, color);
	}
}
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	1f 91       	pop	r17
 440:	ff 90       	pop	r15
 442:	ef 90       	pop	r14
 444:	08 95       	ret

00000446 <_ZN9NixieTube9setNumberEhh>:
	index %= _section_count;
	_buff[index] &= 0x8fff;
	_buff[index] |= color << 12;
}

void NixieTube::setNumber(byte index, byte num)
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
{
	_buff[index] &= 0xfc00;
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	66 0f       	add	r22, r22
 44e:	77 1f       	adc	r23, r23
 450:	fc 01       	movw	r30, r24
 452:	c2 81       	ldd	r28, Z+2	; 0x02
 454:	d3 81       	ldd	r29, Z+3	; 0x03
 456:	c6 0f       	add	r28, r22
 458:	d7 1f       	adc	r29, r23
 45a:	e8 81       	ld	r30, Y
 45c:	f9 81       	ldd	r31, Y+1	; 0x01
 45e:	e0 70       	andi	r30, 0x00	; 0
 460:	fc 7f       	andi	r31, 0xFC	; 252
 462:	f9 83       	std	Y+1, r31	; 0x01
 464:	e8 83       	st	Y, r30

	if (num == 0xff) return;
 466:	4f 3f       	cpi	r20, 0xFF	; 255
 468:	91 f0       	breq	.+36     	; 0x48e <_ZN9NixieTube9setNumberEhh+0x48>

	num = (num + 9) % 10;
 46a:	84 2f       	mov	r24, r20
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	09 96       	adiw	r24, 0x09	; 9
 470:	6a e0       	ldi	r22, 0x0A	; 10
 472:	70 e0       	ldi	r23, 0x00	; 0
 474:	0e 94 ed 05 	call	0xbda	; 0xbda <__divmodhi4>
	_buff[index] |= _BV(num);
 478:	21 e0       	ldi	r18, 0x01	; 1
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	02 c0       	rjmp	.+4      	; 0x482 <_ZN9NixieTube9setNumberEhh+0x3c>
 47e:	22 0f       	add	r18, r18
 480:	33 1f       	adc	r19, r19
 482:	8a 95       	dec	r24
 484:	e2 f7       	brpl	.-8      	; 0x47e <_ZN9NixieTube9setNumberEhh+0x38>
 486:	e2 2b       	or	r30, r18
 488:	f3 2b       	or	r31, r19
 48a:	f9 83       	std	Y+1, r31	; 0x01
 48c:	e8 83       	st	Y, r30
}
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <_ZN9NixieTube8setColonE5Colon>:
{
	_buff[index] &= 0xf3ff;
	_buff[index] |= colon << 10;
}

void NixieTube::setColon(Colon colon)
 494:	dc 01       	movw	r26, r24
}

void NixieTube::setColon(byte index, Colon colon)
{
	_buff[index] &= 0xf3ff;
	_buff[index] |= colon << 10;
 496:	36 2f       	mov	r19, r22
 498:	33 0f       	add	r19, r19
 49a:	33 0f       	add	r19, r19
 49c:	20 e0       	ldi	r18, 0x00	; 0
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	12 c0       	rjmp	.+36     	; 0x4c6 <_ZN9NixieTube8setColonE5Colon+0x32>
		this->setNumber(i, num);
}

void NixieTube::setColon(byte index, Colon colon)
{
	_buff[index] &= 0xf3ff;
 4a2:	84 2f       	mov	r24, r20
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	12 96       	adiw	r26, 0x02	; 2
 4ac:	ed 91       	ld	r30, X+
 4ae:	fc 91       	ld	r31, X
 4b0:	13 97       	sbiw	r26, 0x03	; 3
 4b2:	e8 0f       	add	r30, r24
 4b4:	f9 1f       	adc	r31, r25
 4b6:	80 81       	ld	r24, Z
 4b8:	91 81       	ldd	r25, Z+1	; 0x01
 4ba:	93 7f       	andi	r25, 0xF3	; 243
	_buff[index] |= colon << 10;
 4bc:	82 2b       	or	r24, r18
 4be:	93 2b       	or	r25, r19
 4c0:	91 83       	std	Z+1, r25	; 0x01
 4c2:	80 83       	st	Z, r24
}

void NixieTube::setColon(Colon colon)
{
	for (byte i=0; i<_section_count; i++)
 4c4:	4f 5f       	subi	r20, 0xFF	; 255
 4c6:	14 96       	adiw	r26, 0x04	; 4
 4c8:	8c 91       	ld	r24, X
 4ca:	14 97       	sbiw	r26, 0x04	; 4
 4cc:	48 17       	cp	r20, r24
 4ce:	48 f3       	brcs	.-46     	; 0x4a2 <_ZN9NixieTube8setColonE5Colon+0xe>
		this->setColon(i, colon);
}
 4d0:	08 95       	ret

000004d2 <_ZN9NixieTube9putNumberElh>:

void NixieTube::putNumber(long value, byte minLength)
 4d2:	cf 92       	push	r12
 4d4:	df 92       	push	r13
 4d6:	ef 92       	push	r14
 4d8:	ff 92       	push	r15
 4da:	0f 93       	push	r16
 4dc:	1f 93       	push	r17
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	ec 01       	movw	r28, r24
 4e4:	7a 01       	movw	r14, r20
 4e6:	8b 01       	movw	r16, r22
 4e8:	c2 2e       	mov	r12, r18
 4ea:	dd 24       	eor	r13, r13
 4ec:	26 c0       	rjmp	.+76     	; 0x53a <_ZN9NixieTube9putNumberElh+0x68>
{
	for (byte i=0; i< _section_count; i++)
	{
		byte num = value % 10;
		this->setNumber(i, num);
 4ee:	c8 01       	movw	r24, r16
 4f0:	b7 01       	movw	r22, r14
 4f2:	2a e0       	ldi	r18, 0x0A	; 10
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	50 e0       	ldi	r21, 0x00	; 0
 4fa:	0e 94 00 06 	call	0xc00	; 0xc00 <__divmodsi4>
 4fe:	46 2f       	mov	r20, r22
 500:	ce 01       	movw	r24, r28
 502:	6d 2d       	mov	r22, r13
 504:	0e 94 23 02 	call	0x446	; 0x446 <_ZN9NixieTube9setNumberEhh>
		if (value==0 && i>=minLength)
 508:	e1 14       	cp	r14, r1
 50a:	f1 04       	cpc	r15, r1
 50c:	01 05       	cpc	r16, r1
 50e:	11 05       	cpc	r17, r1
 510:	39 f4       	brne	.+14     	; 0x520 <_ZN9NixieTube9putNumberElh+0x4e>
 512:	dc 14       	cp	r13, r12
 514:	28 f0       	brcs	.+10     	; 0x520 <_ZN9NixieTube9putNumberElh+0x4e>
			this->setNumber(i, -1);
 516:	ce 01       	movw	r24, r28
 518:	6d 2d       	mov	r22, r13
 51a:	4f ef       	ldi	r20, 0xFF	; 255
 51c:	0e 94 23 02 	call	0x446	; 0x446 <_ZN9NixieTube9setNumberEhh>
		value /= 10;
 520:	c8 01       	movw	r24, r16
 522:	b7 01       	movw	r22, r14
 524:	2a e0       	ldi	r18, 0x0A	; 10
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	40 e0       	ldi	r20, 0x00	; 0
 52a:	50 e0       	ldi	r21, 0x00	; 0
 52c:	0e 94 00 06 	call	0xc00	; 0xc00 <__divmodsi4>
 530:	c9 01       	movw	r24, r18
 532:	da 01       	movw	r26, r20
 534:	7c 01       	movw	r14, r24
 536:	8d 01       	movw	r16, r26
		this->setColon(i, colon);
}

void NixieTube::putNumber(long value, byte minLength)
{
	for (byte i=0; i< _section_count; i++)
 538:	d3 94       	inc	r13
 53a:	8c 81       	ldd	r24, Y+4	; 0x04
 53c:	d8 16       	cp	r13, r24
 53e:	b8 f2       	brcs	.-82     	; 0x4ee <_ZN9NixieTube9putNumberElh+0x1c>
		this->setNumber(i, num);
		if (value==0 && i>=minLength)
			this->setNumber(i, -1);
		value /= 10;
	}
}
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	1f 91       	pop	r17
 546:	0f 91       	pop	r16
 548:	ff 90       	pop	r15
 54a:	ef 90       	pop	r14
 54c:	df 90       	pop	r13
 54e:	cf 90       	pop	r12
 550:	08 95       	ret

00000552 <_ZN9NixieTubeD1Ev>:
		digitalWrite(_pin_oe, brightness?LOW:HIGH);
	else
		analogWrite(_pin_oe, 0xff - brightness);
}

NixieTube::~NixieTube()
 552:	fc 01       	movw	r30, r24
 554:	8e e0       	ldi	r24, 0x0E	; 14
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	91 83       	std	Z+1, r25	; 0x01
 55a:	80 83       	st	Z, r24
{
	free(_buff);
 55c:	82 81       	ldd	r24, Z+2	; 0x02
 55e:	93 81       	ldd	r25, Z+3	; 0x03
 560:	0e 94 37 01 	call	0x26e	; 0x26e <free>
}
 564:	08 95       	ret

00000566 <_ZN9NixieTubeD0Ev>:
		digitalWrite(_pin_oe, brightness?LOW:HIGH);
	else
		analogWrite(_pin_oe, 0xff - brightness);
}

NixieTube::~NixieTube()
 566:	0f 93       	push	r16
 568:	1f 93       	push	r17
 56a:	8c 01       	movw	r16, r24
 56c:	8e e0       	ldi	r24, 0x0E	; 14
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	f8 01       	movw	r30, r16
 572:	91 83       	std	Z+1, r25	; 0x01
 574:	80 83       	st	Z, r24
{
	free(_buff);
 576:	82 81       	ldd	r24, Z+2	; 0x02
 578:	93 81       	ldd	r25, Z+3	; 0x03
 57a:	0e 94 37 01 	call	0x26e	; 0x26e <free>
}
 57e:	c8 01       	movw	r24, r16
 580:	0e 94 de 03 	call	0x7bc	; 0x7bc <_ZdlPv>
 584:	1f 91       	pop	r17
 586:	0f 91       	pop	r16
 588:	08 95       	ret

0000058a <_ZN9NixieTube13setBrightnessEh>:
			this->setNumber(i, -1);
		value /= 10;
	}
}

void NixieTube::setBrightness(byte brightness)
 58a:	26 2f       	mov	r18, r22
{
	if (digitalPinToTimer(_pin_oe) == NOT_ON_TIMER)
 58c:	fc 01       	movw	r30, r24
 58e:	80 85       	ldd	r24, Z+8	; 0x08
 590:	e8 2f       	mov	r30, r24
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	e2 55       	subi	r30, 0x52	; 82
 596:	ff 4f       	sbci	r31, 0xFF	; 255
 598:	e4 91       	lpm	r30, Z+
 59a:	ee 23       	and	r30, r30
 59c:	39 f4       	brne	.+14     	; 0x5ac <_ZN9NixieTube13setBrightnessEh+0x22>
		digitalWrite(_pin_oe, brightness?LOW:HIGH);
 59e:	60 e0       	ldi	r22, 0x00	; 0
 5a0:	22 23       	and	r18, r18
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <_ZN9NixieTube13setBrightnessEh+0x1c>
 5a4:	61 e0       	ldi	r22, 0x01	; 1
 5a6:	0e 94 43 05 	call	0xa86	; 0xa86 <digitalWrite>
 5aa:	08 95       	ret
	else
		analogWrite(_pin_oe, 0xff - brightness);
 5ac:	6f ef       	ldi	r22, 0xFF	; 255
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	62 1b       	sub	r22, r18
 5b2:	71 09       	sbc	r23, r1
 5b4:	0e 94 bd 04 	call	0x97a	; 0x97a <analogWrite>
 5b8:	08 95       	ret

000005ba <_ZN9NixieTube7displayEv>:

	digitalWrite(_pin_st, LOW);
	digitalWrite(_pin_st, HIGH);
}

void NixieTube::display()
 5ba:	cf 92       	push	r12
 5bc:	df 92       	push	r13
 5be:	ff 92       	push	r15
 5c0:	0f 93       	push	r16
 5c2:	1f 93       	push	r17
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	ec 01       	movw	r28, r24
{
	for (byte i = _section_count; i > 0 ; i--)
 5ca:	fc 80       	ldd	r15, Y+4	; 0x04
	{
		shiftOut(_pin_dt, _pin_sh, MSBFIRST, highByte(_buff[i-1]));
 5cc:	71 e0       	ldi	r23, 0x01	; 1
 5ce:	c7 2e       	mov	r12, r23
 5d0:	d1 2c       	mov	r13, r1
 5d2:	1d c0       	rjmp	.+58     	; 0x60e <_ZN9NixieTube7displayEv+0x54>
 5d4:	86 01       	movw	r16, r12
 5d6:	0f 19       	sub	r16, r15
 5d8:	11 09       	sbc	r17, r1
 5da:	00 0f       	add	r16, r16
 5dc:	11 1f       	adc	r17, r17
 5de:	10 95       	com	r17
 5e0:	01 95       	neg	r16
 5e2:	1f 4f       	sbci	r17, 0xFF	; 255
 5e4:	ea 81       	ldd	r30, Y+2	; 0x02
 5e6:	fb 81       	ldd	r31, Y+3	; 0x03
 5e8:	e0 0f       	add	r30, r16
 5ea:	f1 1f       	adc	r31, r17
 5ec:	21 81       	ldd	r18, Z+1	; 0x01
 5ee:	8d 81       	ldd	r24, Y+5	; 0x05
 5f0:	6f 81       	ldd	r22, Y+7	; 0x07
 5f2:	41 e0       	ldi	r20, 0x01	; 1
 5f4:	0e 94 97 05 	call	0xb2e	; 0xb2e <shiftOut>
		shiftOut(_pin_dt, _pin_sh, MSBFIRST, lowByte(_buff[i-1]));
 5f8:	ea 81       	ldd	r30, Y+2	; 0x02
 5fa:	fb 81       	ldd	r31, Y+3	; 0x03
 5fc:	e0 0f       	add	r30, r16
 5fe:	f1 1f       	adc	r31, r17
 600:	8d 81       	ldd	r24, Y+5	; 0x05
 602:	6f 81       	ldd	r22, Y+7	; 0x07
 604:	41 e0       	ldi	r20, 0x01	; 1
 606:	20 81       	ld	r18, Z
 608:	0e 94 97 05 	call	0xb2e	; 0xb2e <shiftOut>
	digitalWrite(_pin_st, HIGH);
}

void NixieTube::display()
{
	for (byte i = _section_count; i > 0 ; i--)
 60c:	fa 94       	dec	r15
 60e:	ff 20       	and	r15, r15
 610:	09 f7       	brne	.-62     	; 0x5d4 <_ZN9NixieTube7displayEv+0x1a>
	{
		shiftOut(_pin_dt, _pin_sh, MSBFIRST, highByte(_buff[i-1]));
		shiftOut(_pin_dt, _pin_sh, MSBFIRST, lowByte(_buff[i-1]));
	}

	digitalWrite(_pin_st, LOW);
 612:	8e 81       	ldd	r24, Y+6	; 0x06
 614:	60 e0       	ldi	r22, 0x00	; 0
 616:	0e 94 43 05 	call	0xa86	; 0xa86 <digitalWrite>
	digitalWrite(_pin_st, HIGH);
 61a:	8e 81       	ldd	r24, Y+6	; 0x06
 61c:	61 e0       	ldi	r22, 0x01	; 1
 61e:	0e 94 43 05 	call	0xa86	; 0xa86 <digitalWrite>

}
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	1f 91       	pop	r17
 628:	0f 91       	pop	r16
 62a:	ff 90       	pop	r15
 62c:	df 90       	pop	r13
 62e:	cf 90       	pop	r12
 630:	08 95       	ret

00000632 <_ZN9NixieTubeC1Ehhhhh>:
 */

#include "NixieTube.h"

NixieTube::NixieTube(uint8_t pin_din, uint8_t pin_st, uint8_t pin_sh,
		uint8_t pin_oe, byte section_count)
 632:	df 92       	push	r13
 634:	ef 92       	push	r14
 636:	ff 92       	push	r15
 638:	0f 93       	push	r16
 63a:	1f 93       	push	r17
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	ec 01       	movw	r28, r24
 642:	16 2f       	mov	r17, r22
 644:	f4 2e       	mov	r15, r20
 646:	d2 2e       	mov	r13, r18
 648:	8e 2d       	mov	r24, r14
 64a:	2e e0       	ldi	r18, 0x0E	; 14
 64c:	31 e0       	ldi	r19, 0x01	; 1
 64e:	39 83       	std	Y+1, r19	; 0x01
 650:	28 83       	st	Y, r18
{
	_section_count = section_count;
 652:	ec 82       	std	Y+4, r14	; 0x04
	_buff = (word *) malloc(sizeof(word) * section_count);
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	88 0f       	add	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	0e 94 8d 00 	call	0x11a	; 0x11a <malloc>
 65e:	8a 83       	std	Y+2, r24	; 0x02
 660:	9b 83       	std	Y+3, r25	; 0x03

	_pin_dt = pin_din;
 662:	1d 83       	std	Y+5, r17	; 0x05
	_pin_st = pin_st;
 664:	fe 82       	std	Y+6, r15	; 0x06
	_pin_sh = pin_sh;
 666:	df 82       	std	Y+7, r13	; 0x07
	_pin_oe = pin_oe;
 668:	08 87       	std	Y+8, r16	; 0x08

	pinMode(_pin_dt, OUTPUT);
 66a:	81 2f       	mov	r24, r17
 66c:	61 e0       	ldi	r22, 0x01	; 1
 66e:	0e 94 1d 05 	call	0xa3a	; 0xa3a <pinMode>
	pinMode(_pin_st, OUTPUT);
 672:	8e 81       	ldd	r24, Y+6	; 0x06
 674:	61 e0       	ldi	r22, 0x01	; 1
 676:	0e 94 1d 05 	call	0xa3a	; 0xa3a <pinMode>
	pinMode(_pin_sh, OUTPUT);
 67a:	8f 81       	ldd	r24, Y+7	; 0x07
 67c:	61 e0       	ldi	r22, 0x01	; 1
 67e:	0e 94 1d 05 	call	0xa3a	; 0xa3a <pinMode>
	pinMode(_pin_oe, OUTPUT);
 682:	88 85       	ldd	r24, Y+8	; 0x08
 684:	61 e0       	ldi	r22, 0x01	; 1
 686:	0e 94 1d 05 	call	0xa3a	; 0xa3a <pinMode>

	this->setBrightness(0x40);
 68a:	ce 01       	movw	r24, r28
 68c:	60 e4       	ldi	r22, 0x40	; 64
 68e:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN9NixieTube13setBrightnessEh>
 692:	20 e0       	ldi	r18, 0x00	; 0
}

void NixieTube::clear(word value)
{
	for (byte i = 0; i < _section_count; i++)
		_buff[i] = value;
 694:	41 e0       	ldi	r20, 0x01	; 1
 696:	50 e0       	ldi	r21, 0x00	; 0
 698:	0b c0       	rjmp	.+22     	; 0x6b0 <_ZN9NixieTubeC1Ehhhhh+0x7e>
 69a:	82 2f       	mov	r24, r18
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	ea 81       	ldd	r30, Y+2	; 0x02
 6a4:	fb 81       	ldd	r31, Y+3	; 0x03
 6a6:	e8 0f       	add	r30, r24
 6a8:	f9 1f       	adc	r31, r25
 6aa:	51 83       	std	Z+1, r21	; 0x01
 6ac:	40 83       	st	Z, r20

}

void NixieTube::clear(word value)
{
	for (byte i = 0; i < _section_count; i++)
 6ae:	2f 5f       	subi	r18, 0xFF	; 255
 6b0:	8c 81       	ldd	r24, Y+4	; 0x04
 6b2:	28 17       	cp	r18, r24
 6b4:	90 f3       	brcs	.-28     	; 0x69a <_ZN9NixieTubeC1Ehhhhh+0x68>

	this->setBrightness(0x40);

	this->clear(0x01);

}
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	1f 91       	pop	r17
 6bc:	0f 91       	pop	r16
 6be:	ff 90       	pop	r15
 6c0:	ef 90       	pop	r14
 6c2:	df 90       	pop	r13
 6c4:	08 95       	ret

000006c6 <setup>:
NixieTube tube(11, 12, 13, 10, 4);

void setup()
{
	//tube.setBackgroundColor(Blue);
}
 6c6:	08 95       	ret

000006c8 <_Z41__static_initialization_and_destruction_0ii>:

	tube.putNumber(k, 4);

	tube.display();
	delay(1000);
}
 6c8:	ef 92       	push	r14
 6ca:	0f 93       	push	r16
 6cc:	81 30       	cpi	r24, 0x01	; 1
 6ce:	91 05       	cpc	r25, r1
 6d0:	71 f4       	brne	.+28     	; 0x6ee <_Z41__static_initialization_and_destruction_0ii+0x26>
 6d2:	6f 5f       	subi	r22, 0xFF	; 255
 6d4:	7f 4f       	sbci	r23, 0xFF	; 255
 6d6:	a1 f4       	brne	.+40     	; 0x700 <_Z41__static_initialization_and_destruction_0ii+0x38>
#include "NixieTubeTest.h"
#include "NixieTube.h"

NixieTube tube(11, 12, 13, 10, 4);
 6d8:	82 e1       	ldi	r24, 0x12	; 18
 6da:	91 e0       	ldi	r25, 0x01	; 1
 6dc:	6b e0       	ldi	r22, 0x0B	; 11
 6de:	4c e0       	ldi	r20, 0x0C	; 12
 6e0:	2d e0       	ldi	r18, 0x0D	; 13
 6e2:	0a e0       	ldi	r16, 0x0A	; 10
 6e4:	34 e0       	ldi	r19, 0x04	; 4
 6e6:	e3 2e       	mov	r14, r19
 6e8:	0e 94 19 03 	call	0x632	; 0x632 <_ZN9NixieTubeC1Ehhhhh>
 6ec:	09 c0       	rjmp	.+18     	; 0x700 <_Z41__static_initialization_and_destruction_0ii+0x38>
 6ee:	89 2b       	or	r24, r25
 6f0:	39 f4       	brne	.+14     	; 0x700 <_Z41__static_initialization_and_destruction_0ii+0x38>
 6f2:	6f 5f       	subi	r22, 0xFF	; 255
 6f4:	7f 4f       	sbci	r23, 0xFF	; 255
 6f6:	21 f4       	brne	.+8      	; 0x700 <_Z41__static_initialization_and_destruction_0ii+0x38>
 6f8:	82 e1       	ldi	r24, 0x12	; 18
 6fa:	91 e0       	ldi	r25, 0x01	; 1
 6fc:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN9NixieTubeD1Ev>

	tube.putNumber(k, 4);

	tube.display();
	delay(1000);
}
 700:	0f 91       	pop	r16
 702:	ef 90       	pop	r14
 704:	08 95       	ret

00000706 <_GLOBAL__D_tube>:
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	6f ef       	ldi	r22, 0xFF	; 255
 70c:	7f ef       	ldi	r23, 0xFF	; 255
 70e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z41__static_initialization_and_destruction_0ii>
 712:	08 95       	ret

00000714 <_GLOBAL__I_tube>:
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	6f ef       	ldi	r22, 0xFF	; 255
 71a:	7f ef       	ldi	r23, 0xFF	; 255
 71c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z41__static_initialization_and_destruction_0ii>
 720:	08 95       	ret

00000722 <loop>:
void setup()
{
	//tube.setBackgroundColor(Blue);
}

void loop()
 722:	cf 92       	push	r12
 724:	df 92       	push	r13
 726:	ef 92       	push	r14
 728:	ff 92       	push	r15
 72a:	0f 93       	push	r16
 72c:	1f 93       	push	r17
{
	long k = random();
 72e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <random>
 732:	7b 01       	movw	r14, r22
 734:	8c 01       	movw	r16, r24

	tube.setBackgroundColor((Color)(k%8));
 736:	42 e1       	ldi	r20, 0x12	; 18
 738:	c4 2e       	mov	r12, r20
 73a:	41 e0       	ldi	r20, 0x01	; 1
 73c:	d4 2e       	mov	r13, r20
 73e:	28 e0       	ldi	r18, 0x08	; 8
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	40 e0       	ldi	r20, 0x00	; 0
 744:	50 e0       	ldi	r21, 0x00	; 0
 746:	0e 94 00 06 	call	0xc00	; 0xc00 <__divmodsi4>
 74a:	9b 01       	movw	r18, r22
 74c:	ac 01       	movw	r20, r24
 74e:	c6 01       	movw	r24, r12
 750:	b9 01       	movw	r22, r18
 752:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN9NixieTube18setBackgroundColorE5Color>
	tube.setColon((Colon)(k%4));
 756:	c8 01       	movw	r24, r16
 758:	b7 01       	movw	r22, r14
 75a:	24 e0       	ldi	r18, 0x04	; 4
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	40 e0       	ldi	r20, 0x00	; 0
 760:	50 e0       	ldi	r21, 0x00	; 0
 762:	0e 94 00 06 	call	0xc00	; 0xc00 <__divmodsi4>
 766:	9b 01       	movw	r18, r22
 768:	ac 01       	movw	r20, r24
 76a:	c6 01       	movw	r24, r12
 76c:	b9 01       	movw	r22, r18
 76e:	0e 94 4a 02 	call	0x494	; 0x494 <_ZN9NixieTube8setColonE5Colon>

	tube.putNumber(k, 4);
 772:	c6 01       	movw	r24, r12
 774:	b8 01       	movw	r22, r16
 776:	a7 01       	movw	r20, r14
 778:	24 e0       	ldi	r18, 0x04	; 4
 77a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <_ZN9NixieTube9putNumberElh>

	tube.display();
 77e:	c6 01       	movw	r24, r12
 780:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_ZN9NixieTube7displayEv>
	delay(1000);
 784:	68 ee       	ldi	r22, 0xE8	; 232
 786:	73 e0       	ldi	r23, 0x03	; 3
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 94 29 04 	call	0x852	; 0x852 <delay>
}
 790:	1f 91       	pop	r17
 792:	0f 91       	pop	r16
 794:	ff 90       	pop	r15
 796:	ef 90       	pop	r14
 798:	df 90       	pop	r13
 79a:	cf 90       	pop	r12
 79c:	08 95       	ret

0000079e <main>:
#include <Arduino.h>

int main(void)
 79e:	cf 93       	push	r28
 7a0:	df 93       	push	r29
{
	init();
 7a2:	0e 94 82 04 	call	0x904	; 0x904 <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
 7a6:	0e 94 63 03 	call	0x6c6	; 0x6c6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 7aa:	c0 e0       	ldi	r28, 0x00	; 0
 7ac:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 7ae:	0e 94 91 03 	call	0x722	; 0x722 <loop>
		if (serialEventRun) serialEventRun();
 7b2:	20 97       	sbiw	r28, 0x00	; 0
 7b4:	e1 f3       	breq	.-8      	; 0x7ae <main+0x10>
 7b6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 7ba:	f9 cf       	rjmp	.-14     	; 0x7ae <main+0x10>

000007bc <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
 7bc:	0e 94 37 01 	call	0x26e	; 0x26e <free>
} 
 7c0:	08 95       	ret

000007c2 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
 7c2:	1f 92       	push	r1
 7c4:	0f 92       	push	r0
 7c6:	0f b6       	in	r0, 0x3f	; 63
 7c8:	0f 92       	push	r0
 7ca:	11 24       	eor	r1, r1
 7cc:	2f 93       	push	r18
 7ce:	3f 93       	push	r19
 7d0:	8f 93       	push	r24
 7d2:	9f 93       	push	r25
 7d4:	af 93       	push	r26
 7d6:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 7d8:	80 91 1f 01 	lds	r24, 0x011F
 7dc:	90 91 20 01 	lds	r25, 0x0120
 7e0:	a0 91 21 01 	lds	r26, 0x0121
 7e4:	b0 91 22 01 	lds	r27, 0x0122
	unsigned char f = timer0_fract;
 7e8:	30 91 23 01 	lds	r19, 0x0123

	m += MILLIS_INC;
 7ec:	01 96       	adiw	r24, 0x01	; 1
 7ee:	a1 1d       	adc	r26, r1
 7f0:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
 7f2:	23 2f       	mov	r18, r19
 7f4:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
 7f6:	2d 37       	cpi	r18, 0x7D	; 125
 7f8:	20 f0       	brcs	.+8      	; 0x802 <__vector_16+0x40>
		f -= FRACT_MAX;
 7fa:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
 7fc:	01 96       	adiw	r24, 0x01	; 1
 7fe:	a1 1d       	adc	r26, r1
 800:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 802:	20 93 23 01 	sts	0x0123, r18
	timer0_millis = m;
 806:	80 93 1f 01 	sts	0x011F, r24
 80a:	90 93 20 01 	sts	0x0120, r25
 80e:	a0 93 21 01 	sts	0x0121, r26
 812:	b0 93 22 01 	sts	0x0122, r27
	timer0_overflow_count++;
 816:	80 91 1b 01 	lds	r24, 0x011B
 81a:	90 91 1c 01 	lds	r25, 0x011C
 81e:	a0 91 1d 01 	lds	r26, 0x011D
 822:	b0 91 1e 01 	lds	r27, 0x011E
 826:	01 96       	adiw	r24, 0x01	; 1
 828:	a1 1d       	adc	r26, r1
 82a:	b1 1d       	adc	r27, r1
 82c:	80 93 1b 01 	sts	0x011B, r24
 830:	90 93 1c 01 	sts	0x011C, r25
 834:	a0 93 1d 01 	sts	0x011D, r26
 838:	b0 93 1e 01 	sts	0x011E, r27
}
 83c:	bf 91       	pop	r27
 83e:	af 91       	pop	r26
 840:	9f 91       	pop	r25
 842:	8f 91       	pop	r24
 844:	3f 91       	pop	r19
 846:	2f 91       	pop	r18
 848:	0f 90       	pop	r0
 84a:	0f be       	out	0x3f, r0	; 63
 84c:	0f 90       	pop	r0
 84e:	1f 90       	pop	r1
 850:	18 95       	reti

00000852 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
 852:	9b 01       	movw	r18, r22
 854:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 856:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
 858:	f8 94       	cli
	m = timer0_overflow_count;
 85a:	80 91 1b 01 	lds	r24, 0x011B
 85e:	90 91 1c 01 	lds	r25, 0x011C
 862:	a0 91 1d 01 	lds	r26, 0x011D
 866:	b0 91 1e 01 	lds	r27, 0x011E
#if defined(TCNT0)
	t = TCNT0;
 86a:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 86c:	a8 9b       	sbis	0x15, 0	; 21
 86e:	05 c0       	rjmp	.+10     	; 0x87a <delay+0x28>
 870:	6f 3f       	cpi	r22, 0xFF	; 255
 872:	19 f0       	breq	.+6      	; 0x87a <delay+0x28>
		m++;
 874:	01 96       	adiw	r24, 0x01	; 1
 876:	a1 1d       	adc	r26, r1
 878:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 87a:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
 87c:	ba 2f       	mov	r27, r26
 87e:	a9 2f       	mov	r26, r25
 880:	98 2f       	mov	r25, r24
 882:	88 27       	eor	r24, r24
 884:	86 0f       	add	r24, r22
 886:	91 1d       	adc	r25, r1
 888:	a1 1d       	adc	r26, r1
 88a:	b1 1d       	adc	r27, r1
 88c:	62 e0       	ldi	r22, 0x02	; 2
 88e:	88 0f       	add	r24, r24
 890:	99 1f       	adc	r25, r25
 892:	aa 1f       	adc	r26, r26
 894:	bb 1f       	adc	r27, r27
 896:	6a 95       	dec	r22
 898:	d1 f7       	brne	.-12     	; 0x88e <delay+0x3c>
 89a:	bc 01       	movw	r22, r24
 89c:	2d c0       	rjmp	.+90     	; 0x8f8 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 89e:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
 8a0:	f8 94       	cli
	m = timer0_overflow_count;
 8a2:	80 91 1b 01 	lds	r24, 0x011B
 8a6:	90 91 1c 01 	lds	r25, 0x011C
 8aa:	a0 91 1d 01 	lds	r26, 0x011D
 8ae:	b0 91 1e 01 	lds	r27, 0x011E
#if defined(TCNT0)
	t = TCNT0;
 8b2:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 8b4:	a8 9b       	sbis	0x15, 0	; 21
 8b6:	05 c0       	rjmp	.+10     	; 0x8c2 <delay+0x70>
 8b8:	ef 3f       	cpi	r30, 0xFF	; 255
 8ba:	19 f0       	breq	.+6      	; 0x8c2 <delay+0x70>
		m++;
 8bc:	01 96       	adiw	r24, 0x01	; 1
 8be:	a1 1d       	adc	r26, r1
 8c0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 8c2:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
 8c4:	ba 2f       	mov	r27, r26
 8c6:	a9 2f       	mov	r26, r25
 8c8:	98 2f       	mov	r25, r24
 8ca:	88 27       	eor	r24, r24
 8cc:	8e 0f       	add	r24, r30
 8ce:	91 1d       	adc	r25, r1
 8d0:	a1 1d       	adc	r26, r1
 8d2:	b1 1d       	adc	r27, r1
 8d4:	e2 e0       	ldi	r30, 0x02	; 2
 8d6:	88 0f       	add	r24, r24
 8d8:	99 1f       	adc	r25, r25
 8da:	aa 1f       	adc	r26, r26
 8dc:	bb 1f       	adc	r27, r27
 8de:	ea 95       	dec	r30
 8e0:	d1 f7       	brne	.-12     	; 0x8d6 <delay+0x84>
 8e2:	86 1b       	sub	r24, r22
 8e4:	97 0b       	sbc	r25, r23
 8e6:	88 5e       	subi	r24, 0xE8	; 232
 8e8:	93 40       	sbci	r25, 0x03	; 3
 8ea:	c8 f2       	brcs	.-78     	; 0x89e <delay+0x4c>
			ms--;
 8ec:	21 50       	subi	r18, 0x01	; 1
 8ee:	30 40       	sbci	r19, 0x00	; 0
 8f0:	40 40       	sbci	r20, 0x00	; 0
 8f2:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
 8f4:	68 51       	subi	r22, 0x18	; 24
 8f6:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 8f8:	21 15       	cp	r18, r1
 8fa:	31 05       	cpc	r19, r1
 8fc:	41 05       	cpc	r20, r1
 8fe:	51 05       	cpc	r21, r1
 900:	71 f6       	brne	.-100    	; 0x89e <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 902:	08 95       	ret

00000904 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 904:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 906:	84 b5       	in	r24, 0x24	; 36
 908:	82 60       	ori	r24, 0x02	; 2
 90a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 90c:	84 b5       	in	r24, 0x24	; 36
 90e:	81 60       	ori	r24, 0x01	; 1
 910:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 912:	85 b5       	in	r24, 0x25	; 37
 914:	82 60       	ori	r24, 0x02	; 2
 916:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 918:	85 b5       	in	r24, 0x25	; 37
 91a:	81 60       	ori	r24, 0x01	; 1
 91c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 91e:	ee e6       	ldi	r30, 0x6E	; 110
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	80 81       	ld	r24, Z
 924:	81 60       	ori	r24, 0x01	; 1
 926:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 928:	e1 e8       	ldi	r30, 0x81	; 129
 92a:	f0 e0       	ldi	r31, 0x00	; 0
 92c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 92e:	80 81       	ld	r24, Z
 930:	82 60       	ori	r24, 0x02	; 2
 932:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 934:	80 81       	ld	r24, Z
 936:	81 60       	ori	r24, 0x01	; 1
 938:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 93a:	e0 e8       	ldi	r30, 0x80	; 128
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	80 81       	ld	r24, Z
 940:	81 60       	ori	r24, 0x01	; 1
 942:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 944:	e1 eb       	ldi	r30, 0xB1	; 177
 946:	f0 e0       	ldi	r31, 0x00	; 0
 948:	80 81       	ld	r24, Z
 94a:	84 60       	ori	r24, 0x04	; 4
 94c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 94e:	e0 eb       	ldi	r30, 0xB0	; 176
 950:	f0 e0       	ldi	r31, 0x00	; 0
 952:	80 81       	ld	r24, Z
 954:	81 60       	ori	r24, 0x01	; 1
 956:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 958:	ea e7       	ldi	r30, 0x7A	; 122
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	80 81       	ld	r24, Z
 95e:	84 60       	ori	r24, 0x04	; 4
 960:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 962:	80 81       	ld	r24, Z
 964:	82 60       	ori	r24, 0x02	; 2
 966:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 968:	80 81       	ld	r24, Z
 96a:	81 60       	ori	r24, 0x01	; 1
 96c:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 96e:	80 81       	ld	r24, Z
 970:	80 68       	ori	r24, 0x80	; 128
 972:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 974:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 978:	08 95       	ret

0000097a <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
 97a:	1f 93       	push	r17
 97c:	cf 93       	push	r28
 97e:	df 93       	push	r29
 980:	18 2f       	mov	r17, r24
 982:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
 984:	61 e0       	ldi	r22, 0x01	; 1
 986:	0e 94 1d 05 	call	0xa3a	; 0xa3a <pinMode>
	if (val == 0)
 98a:	20 97       	sbiw	r28, 0x00	; 0
 98c:	09 f4       	brne	.+2      	; 0x990 <analogWrite+0x16>
 98e:	4a c0       	rjmp	.+148    	; 0xa24 <analogWrite+0xaa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
 990:	cf 3f       	cpi	r28, 0xFF	; 255
 992:	d1 05       	cpc	r29, r1
 994:	09 f4       	brne	.+2      	; 0x998 <analogWrite+0x1e>
 996:	49 c0       	rjmp	.+146    	; 0xa2a <analogWrite+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
 998:	e1 2f       	mov	r30, r17
 99a:	f0 e0       	ldi	r31, 0x00	; 0
 99c:	e2 55       	subi	r30, 0x52	; 82
 99e:	ff 4f       	sbci	r31, 0xFF	; 255
 9a0:	84 91       	lpm	r24, Z+
 9a2:	83 30       	cpi	r24, 0x03	; 3
 9a4:	c1 f0       	breq	.+48     	; 0x9d6 <analogWrite+0x5c>
 9a6:	84 30       	cpi	r24, 0x04	; 4
 9a8:	28 f4       	brcc	.+10     	; 0x9b4 <analogWrite+0x3a>
 9aa:	81 30       	cpi	r24, 0x01	; 1
 9ac:	51 f0       	breq	.+20     	; 0x9c2 <analogWrite+0x48>
 9ae:	82 30       	cpi	r24, 0x02	; 2
 9b0:	b1 f5       	brne	.+108    	; 0xa1e <analogWrite+0xa4>
 9b2:	0c c0       	rjmp	.+24     	; 0x9cc <analogWrite+0x52>
 9b4:	86 30       	cpi	r24, 0x06	; 6
 9b6:	19 f1       	breq	.+70     	; 0x9fe <analogWrite+0x84>
 9b8:	87 30       	cpi	r24, 0x07	; 7
 9ba:	49 f1       	breq	.+82     	; 0xa0e <analogWrite+0x94>
 9bc:	84 30       	cpi	r24, 0x04	; 4
 9be:	79 f5       	brne	.+94     	; 0xa1e <analogWrite+0xa4>
 9c0:	14 c0       	rjmp	.+40     	; 0x9ea <analogWrite+0x70>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
 9c2:	84 b5       	in	r24, 0x24	; 36
 9c4:	80 68       	ori	r24, 0x80	; 128
 9c6:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
 9c8:	c7 bd       	out	0x27, r28	; 39
 9ca:	33 c0       	rjmp	.+102    	; 0xa32 <analogWrite+0xb8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
 9cc:	84 b5       	in	r24, 0x24	; 36
 9ce:	80 62       	ori	r24, 0x20	; 32
 9d0:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
 9d2:	c8 bd       	out	0x28, r28	; 40
 9d4:	2e c0       	rjmp	.+92     	; 0xa32 <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
 9d6:	80 91 80 00 	lds	r24, 0x0080
 9da:	80 68       	ori	r24, 0x80	; 128
 9dc:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
 9e0:	d0 93 89 00 	sts	0x0089, r29
 9e4:	c0 93 88 00 	sts	0x0088, r28
 9e8:	24 c0       	rjmp	.+72     	; 0xa32 <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
 9ea:	80 91 80 00 	lds	r24, 0x0080
 9ee:	80 62       	ori	r24, 0x20	; 32
 9f0:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
 9f4:	d0 93 8b 00 	sts	0x008B, r29
 9f8:	c0 93 8a 00 	sts	0x008A, r28
 9fc:	1a c0       	rjmp	.+52     	; 0xa32 <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
 9fe:	80 91 b0 00 	lds	r24, 0x00B0
 a02:	80 68       	ori	r24, 0x80	; 128
 a04:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
 a08:	c0 93 b3 00 	sts	0x00B3, r28
 a0c:	12 c0       	rjmp	.+36     	; 0xa32 <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
 a0e:	80 91 b0 00 	lds	r24, 0x00B0
 a12:	80 62       	ori	r24, 0x20	; 32
 a14:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
 a18:	c0 93 b4 00 	sts	0x00B4, r28
 a1c:	0a c0       	rjmp	.+20     	; 0xa32 <analogWrite+0xb8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
 a1e:	c0 38       	cpi	r28, 0x80	; 128
 a20:	d1 05       	cpc	r29, r1
 a22:	1c f4       	brge	.+6      	; 0xa2a <analogWrite+0xb0>
					digitalWrite(pin, LOW);
 a24:	81 2f       	mov	r24, r17
 a26:	60 e0       	ldi	r22, 0x00	; 0
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <analogWrite+0xb4>
				} else {
					digitalWrite(pin, HIGH);
 a2a:	81 2f       	mov	r24, r17
 a2c:	61 e0       	ldi	r22, 0x01	; 1
 a2e:	0e 94 43 05 	call	0xa86	; 0xa86 <digitalWrite>
				}
				break;
		}
	}
}
 a32:	df 91       	pop	r29
 a34:	cf 91       	pop	r28
 a36:	1f 91       	pop	r17
 a38:	08 95       	ret

00000a3a <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 a3a:	48 2f       	mov	r20, r24
 a3c:	50 e0       	ldi	r21, 0x00	; 0
 a3e:	ca 01       	movw	r24, r20
 a40:	86 56       	subi	r24, 0x66	; 102
 a42:	9f 4f       	sbci	r25, 0xFF	; 255
 a44:	fc 01       	movw	r30, r24
 a46:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
 a48:	4a 57       	subi	r20, 0x7A	; 122
 a4a:	5f 4f       	sbci	r21, 0xFF	; 255
 a4c:	fa 01       	movw	r30, r20
 a4e:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
 a50:	88 23       	and	r24, r24
 a52:	c1 f0       	breq	.+48     	; 0xa84 <pinMode+0x4a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 a54:	e8 2f       	mov	r30, r24
 a56:	f0 e0       	ldi	r31, 0x00	; 0
 a58:	ee 0f       	add	r30, r30
 a5a:	ff 1f       	adc	r31, r31
 a5c:	e8 59       	subi	r30, 0x98	; 152
 a5e:	ff 4f       	sbci	r31, 0xFF	; 255
 a60:	a5 91       	lpm	r26, Z+
 a62:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
 a64:	66 23       	and	r22, r22
 a66:	41 f4       	brne	.+16     	; 0xa78 <pinMode+0x3e>
		uint8_t oldSREG = SREG;
 a68:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a6a:	f8 94       	cli
		*reg &= ~bit;
 a6c:	8c 91       	ld	r24, X
 a6e:	20 95       	com	r18
 a70:	82 23       	and	r24, r18
 a72:	8c 93       	st	X, r24
		SREG = oldSREG;
 a74:	9f bf       	out	0x3f, r25	; 63
 a76:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
 a78:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a7a:	f8 94       	cli
		*reg |= bit;
 a7c:	8c 91       	ld	r24, X
 a7e:	82 2b       	or	r24, r18
 a80:	8c 93       	st	X, r24
		SREG = oldSREG;
 a82:	9f bf       	out	0x3f, r25	; 63
 a84:	08 95       	ret

00000a86 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
 a86:	48 2f       	mov	r20, r24
 a88:	50 e0       	ldi	r21, 0x00	; 0
 a8a:	ca 01       	movw	r24, r20
 a8c:	82 55       	subi	r24, 0x52	; 82
 a8e:	9f 4f       	sbci	r25, 0xFF	; 255
 a90:	fc 01       	movw	r30, r24
 a92:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
 a94:	ca 01       	movw	r24, r20
 a96:	86 56       	subi	r24, 0x66	; 102
 a98:	9f 4f       	sbci	r25, 0xFF	; 255
 a9a:	fc 01       	movw	r30, r24
 a9c:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
 a9e:	4a 57       	subi	r20, 0x7A	; 122
 aa0:	5f 4f       	sbci	r21, 0xFF	; 255
 aa2:	fa 01       	movw	r30, r20
 aa4:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 aa6:	33 23       	and	r19, r19
 aa8:	09 f4       	brne	.+2      	; 0xaac <digitalWrite+0x26>
 aaa:	40 c0       	rjmp	.+128    	; 0xb2c <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 aac:	22 23       	and	r18, r18
 aae:	51 f1       	breq	.+84     	; 0xb04 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 ab0:	23 30       	cpi	r18, 0x03	; 3
 ab2:	71 f0       	breq	.+28     	; 0xad0 <digitalWrite+0x4a>
 ab4:	24 30       	cpi	r18, 0x04	; 4
 ab6:	28 f4       	brcc	.+10     	; 0xac2 <digitalWrite+0x3c>
 ab8:	21 30       	cpi	r18, 0x01	; 1
 aba:	a1 f0       	breq	.+40     	; 0xae4 <digitalWrite+0x5e>
 abc:	22 30       	cpi	r18, 0x02	; 2
 abe:	11 f5       	brne	.+68     	; 0xb04 <digitalWrite+0x7e>
 ac0:	14 c0       	rjmp	.+40     	; 0xaea <digitalWrite+0x64>
 ac2:	26 30       	cpi	r18, 0x06	; 6
 ac4:	b1 f0       	breq	.+44     	; 0xaf2 <digitalWrite+0x6c>
 ac6:	27 30       	cpi	r18, 0x07	; 7
 ac8:	c1 f0       	breq	.+48     	; 0xafa <digitalWrite+0x74>
 aca:	24 30       	cpi	r18, 0x04	; 4
 acc:	d9 f4       	brne	.+54     	; 0xb04 <digitalWrite+0x7e>
 ace:	04 c0       	rjmp	.+8      	; 0xad8 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 ad0:	80 91 80 00 	lds	r24, 0x0080
 ad4:	8f 77       	andi	r24, 0x7F	; 127
 ad6:	03 c0       	rjmp	.+6      	; 0xade <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 ad8:	80 91 80 00 	lds	r24, 0x0080
 adc:	8f 7d       	andi	r24, 0xDF	; 223
 ade:	80 93 80 00 	sts	0x0080, r24
 ae2:	10 c0       	rjmp	.+32     	; 0xb04 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 ae4:	84 b5       	in	r24, 0x24	; 36
 ae6:	8f 77       	andi	r24, 0x7F	; 127
 ae8:	02 c0       	rjmp	.+4      	; 0xaee <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 aea:	84 b5       	in	r24, 0x24	; 36
 aec:	8f 7d       	andi	r24, 0xDF	; 223
 aee:	84 bd       	out	0x24, r24	; 36
 af0:	09 c0       	rjmp	.+18     	; 0xb04 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 af2:	80 91 b0 00 	lds	r24, 0x00B0
 af6:	8f 77       	andi	r24, 0x7F	; 127
 af8:	03 c0       	rjmp	.+6      	; 0xb00 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 afa:	80 91 b0 00 	lds	r24, 0x00B0
 afe:	8f 7d       	andi	r24, 0xDF	; 223
 b00:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 b04:	e3 2f       	mov	r30, r19
 b06:	f0 e0       	ldi	r31, 0x00	; 0
 b08:	ee 0f       	add	r30, r30
 b0a:	ff 1f       	adc	r31, r31
 b0c:	ee 58       	subi	r30, 0x8E	; 142
 b0e:	ff 4f       	sbci	r31, 0xFF	; 255
 b10:	a5 91       	lpm	r26, Z+
 b12:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
 b14:	2f b7       	in	r18, 0x3f	; 63
	cli();
 b16:	f8 94       	cli

	if (val == LOW) {
 b18:	66 23       	and	r22, r22
 b1a:	21 f4       	brne	.+8      	; 0xb24 <digitalWrite+0x9e>
		*out &= ~bit;
 b1c:	8c 91       	ld	r24, X
 b1e:	90 95       	com	r25
 b20:	89 23       	and	r24, r25
 b22:	02 c0       	rjmp	.+4      	; 0xb28 <digitalWrite+0xa2>
	} else {
		*out |= bit;
 b24:	8c 91       	ld	r24, X
 b26:	89 2b       	or	r24, r25
 b28:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
 b2a:	2f bf       	out	0x3f, r18	; 63
 b2c:	08 95       	ret

00000b2e <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 b2e:	bf 92       	push	r11
 b30:	cf 92       	push	r12
 b32:	df 92       	push	r13
 b34:	ef 92       	push	r14
 b36:	ff 92       	push	r15
 b38:	0f 93       	push	r16
 b3a:	1f 93       	push	r17
 b3c:	cf 93       	push	r28
 b3e:	df 93       	push	r29
 b40:	e8 2e       	mov	r14, r24
 b42:	f6 2e       	mov	r15, r22
 b44:	b4 2e       	mov	r11, r20
 b46:	c7 e0       	ldi	r28, 0x07	; 7
 b48:	d0 e0       	ldi	r29, 0x00	; 0
 b4a:	02 2f       	mov	r16, r18
 b4c:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
 b4e:	87 e0       	ldi	r24, 0x07	; 7
 b50:	c8 2e       	mov	r12, r24
 b52:	d1 2c       	mov	r13, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
 b54:	bb 20       	and	r11, r11
 b56:	59 f4       	brne	.+22     	; 0xb6e <shiftOut+0x40>
			digitalWrite(dataPin, !!(val & (1 << i)));
 b58:	b6 01       	movw	r22, r12
 b5a:	6c 1b       	sub	r22, r28
 b5c:	7d 0b       	sbc	r23, r29
 b5e:	c8 01       	movw	r24, r16
 b60:	02 c0       	rjmp	.+4      	; 0xb66 <shiftOut+0x38>
 b62:	95 95       	asr	r25
 b64:	87 95       	ror	r24
 b66:	6a 95       	dec	r22
 b68:	e2 f7       	brpl	.-8      	; 0xb62 <shiftOut+0x34>
 b6a:	bc 01       	movw	r22, r24
 b6c:	07 c0       	rjmp	.+14     	; 0xb7c <shiftOut+0x4e>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 b6e:	b8 01       	movw	r22, r16
 b70:	0c 2e       	mov	r0, r28
 b72:	02 c0       	rjmp	.+4      	; 0xb78 <shiftOut+0x4a>
 b74:	75 95       	asr	r23
 b76:	67 95       	ror	r22
 b78:	0a 94       	dec	r0
 b7a:	e2 f7       	brpl	.-8      	; 0xb74 <shiftOut+0x46>
 b7c:	61 70       	andi	r22, 0x01	; 1
 b7e:	8e 2d       	mov	r24, r14
 b80:	0e 94 43 05 	call	0xa86	; 0xa86 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
 b84:	8f 2d       	mov	r24, r15
 b86:	61 e0       	ldi	r22, 0x01	; 1
 b88:	0e 94 43 05 	call	0xa86	; 0xa86 <digitalWrite>
		digitalWrite(clockPin, LOW);		
 b8c:	8f 2d       	mov	r24, r15
 b8e:	60 e0       	ldi	r22, 0x00	; 0
 b90:	0e 94 43 05 	call	0xa86	; 0xa86 <digitalWrite>
 b94:	21 97       	sbiw	r28, 0x01	; 1

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 b96:	9f ef       	ldi	r25, 0xFF	; 255
 b98:	cf 3f       	cpi	r28, 0xFF	; 255
 b9a:	d9 07       	cpc	r29, r25
 b9c:	d9 f6       	brne	.-74     	; 0xb54 <shiftOut+0x26>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
 b9e:	df 91       	pop	r29
 ba0:	cf 91       	pop	r28
 ba2:	1f 91       	pop	r17
 ba4:	0f 91       	pop	r16
 ba6:	ff 90       	pop	r15
 ba8:	ef 90       	pop	r14
 baa:	df 90       	pop	r13
 bac:	cf 90       	pop	r12
 bae:	bf 90       	pop	r11
 bb0:	08 95       	ret

00000bb2 <__udivmodhi4>:
 bb2:	aa 1b       	sub	r26, r26
 bb4:	bb 1b       	sub	r27, r27
 bb6:	51 e1       	ldi	r21, 0x11	; 17
 bb8:	07 c0       	rjmp	.+14     	; 0xbc8 <__udivmodhi4_ep>

00000bba <__udivmodhi4_loop>:
 bba:	aa 1f       	adc	r26, r26
 bbc:	bb 1f       	adc	r27, r27
 bbe:	a6 17       	cp	r26, r22
 bc0:	b7 07       	cpc	r27, r23
 bc2:	10 f0       	brcs	.+4      	; 0xbc8 <__udivmodhi4_ep>
 bc4:	a6 1b       	sub	r26, r22
 bc6:	b7 0b       	sbc	r27, r23

00000bc8 <__udivmodhi4_ep>:
 bc8:	88 1f       	adc	r24, r24
 bca:	99 1f       	adc	r25, r25
 bcc:	5a 95       	dec	r21
 bce:	a9 f7       	brne	.-22     	; 0xbba <__udivmodhi4_loop>
 bd0:	80 95       	com	r24
 bd2:	90 95       	com	r25
 bd4:	bc 01       	movw	r22, r24
 bd6:	cd 01       	movw	r24, r26
 bd8:	08 95       	ret

00000bda <__divmodhi4>:
 bda:	97 fb       	bst	r25, 7
 bdc:	09 2e       	mov	r0, r25
 bde:	07 26       	eor	r0, r23
 be0:	0a d0       	rcall	.+20     	; 0xbf6 <__divmodhi4_neg1>
 be2:	77 fd       	sbrc	r23, 7
 be4:	04 d0       	rcall	.+8      	; 0xbee <__divmodhi4_neg2>
 be6:	e5 df       	rcall	.-54     	; 0xbb2 <__udivmodhi4>
 be8:	06 d0       	rcall	.+12     	; 0xbf6 <__divmodhi4_neg1>
 bea:	00 20       	and	r0, r0
 bec:	1a f4       	brpl	.+6      	; 0xbf4 <__divmodhi4_exit>

00000bee <__divmodhi4_neg2>:
 bee:	70 95       	com	r23
 bf0:	61 95       	neg	r22
 bf2:	7f 4f       	sbci	r23, 0xFF	; 255

00000bf4 <__divmodhi4_exit>:
 bf4:	08 95       	ret

00000bf6 <__divmodhi4_neg1>:
 bf6:	f6 f7       	brtc	.-4      	; 0xbf4 <__divmodhi4_exit>
 bf8:	90 95       	com	r25
 bfa:	81 95       	neg	r24
 bfc:	9f 4f       	sbci	r25, 0xFF	; 255
 bfe:	08 95       	ret

00000c00 <__divmodsi4>:
 c00:	97 fb       	bst	r25, 7
 c02:	09 2e       	mov	r0, r25
 c04:	05 26       	eor	r0, r21
 c06:	0e d0       	rcall	.+28     	; 0xc24 <__divmodsi4_neg1>
 c08:	57 fd       	sbrc	r21, 7
 c0a:	04 d0       	rcall	.+8      	; 0xc14 <__divmodsi4_neg2>
 c0c:	14 d0       	rcall	.+40     	; 0xc36 <__udivmodsi4>
 c0e:	0a d0       	rcall	.+20     	; 0xc24 <__divmodsi4_neg1>
 c10:	00 1c       	adc	r0, r0
 c12:	38 f4       	brcc	.+14     	; 0xc22 <__divmodsi4_exit>

00000c14 <__divmodsi4_neg2>:
 c14:	50 95       	com	r21
 c16:	40 95       	com	r20
 c18:	30 95       	com	r19
 c1a:	21 95       	neg	r18
 c1c:	3f 4f       	sbci	r19, 0xFF	; 255
 c1e:	4f 4f       	sbci	r20, 0xFF	; 255
 c20:	5f 4f       	sbci	r21, 0xFF	; 255

00000c22 <__divmodsi4_exit>:
 c22:	08 95       	ret

00000c24 <__divmodsi4_neg1>:
 c24:	f6 f7       	brtc	.-4      	; 0xc22 <__divmodsi4_exit>
 c26:	90 95       	com	r25
 c28:	80 95       	com	r24
 c2a:	70 95       	com	r23
 c2c:	61 95       	neg	r22
 c2e:	7f 4f       	sbci	r23, 0xFF	; 255
 c30:	8f 4f       	sbci	r24, 0xFF	; 255
 c32:	9f 4f       	sbci	r25, 0xFF	; 255
 c34:	08 95       	ret

00000c36 <__udivmodsi4>:
 c36:	a1 e2       	ldi	r26, 0x21	; 33
 c38:	1a 2e       	mov	r1, r26
 c3a:	aa 1b       	sub	r26, r26
 c3c:	bb 1b       	sub	r27, r27
 c3e:	fd 01       	movw	r30, r26
 c40:	0d c0       	rjmp	.+26     	; 0xc5c <__udivmodsi4_ep>

00000c42 <__udivmodsi4_loop>:
 c42:	aa 1f       	adc	r26, r26
 c44:	bb 1f       	adc	r27, r27
 c46:	ee 1f       	adc	r30, r30
 c48:	ff 1f       	adc	r31, r31
 c4a:	a2 17       	cp	r26, r18
 c4c:	b3 07       	cpc	r27, r19
 c4e:	e4 07       	cpc	r30, r20
 c50:	f5 07       	cpc	r31, r21
 c52:	20 f0       	brcs	.+8      	; 0xc5c <__udivmodsi4_ep>
 c54:	a2 1b       	sub	r26, r18
 c56:	b3 0b       	sbc	r27, r19
 c58:	e4 0b       	sbc	r30, r20
 c5a:	f5 0b       	sbc	r31, r21

00000c5c <__udivmodsi4_ep>:
 c5c:	66 1f       	adc	r22, r22
 c5e:	77 1f       	adc	r23, r23
 c60:	88 1f       	adc	r24, r24
 c62:	99 1f       	adc	r25, r25
 c64:	1a 94       	dec	r1
 c66:	69 f7       	brne	.-38     	; 0xc42 <__udivmodsi4_loop>
 c68:	60 95       	com	r22
 c6a:	70 95       	com	r23
 c6c:	80 95       	com	r24
 c6e:	90 95       	com	r25
 c70:	9b 01       	movw	r18, r22
 c72:	ac 01       	movw	r20, r24
 c74:	bd 01       	movw	r22, r26
 c76:	cf 01       	movw	r24, r30
 c78:	08 95       	ret

00000c7a <__tablejump2__>:
 c7a:	ee 0f       	add	r30, r30
 c7c:	ff 1f       	adc	r31, r31

00000c7e <__tablejump__>:
 c7e:	05 90       	lpm	r0, Z+
 c80:	f4 91       	lpm	r31, Z+
 c82:	e0 2d       	mov	r30, r0
 c84:	09 94       	ijmp

00000c86 <__mulsi3>:
 c86:	62 9f       	mul	r22, r18
 c88:	d0 01       	movw	r26, r0
 c8a:	73 9f       	mul	r23, r19
 c8c:	f0 01       	movw	r30, r0
 c8e:	82 9f       	mul	r24, r18
 c90:	e0 0d       	add	r30, r0
 c92:	f1 1d       	adc	r31, r1
 c94:	64 9f       	mul	r22, r20
 c96:	e0 0d       	add	r30, r0
 c98:	f1 1d       	adc	r31, r1
 c9a:	92 9f       	mul	r25, r18
 c9c:	f0 0d       	add	r31, r0
 c9e:	83 9f       	mul	r24, r19
 ca0:	f0 0d       	add	r31, r0
 ca2:	74 9f       	mul	r23, r20
 ca4:	f0 0d       	add	r31, r0
 ca6:	65 9f       	mul	r22, r21
 ca8:	f0 0d       	add	r31, r0
 caa:	99 27       	eor	r25, r25
 cac:	72 9f       	mul	r23, r18
 cae:	b0 0d       	add	r27, r0
 cb0:	e1 1d       	adc	r30, r1
 cb2:	f9 1f       	adc	r31, r25
 cb4:	63 9f       	mul	r22, r19
 cb6:	b0 0d       	add	r27, r0
 cb8:	e1 1d       	adc	r30, r1
 cba:	f9 1f       	adc	r31, r25
 cbc:	bd 01       	movw	r22, r26
 cbe:	cf 01       	movw	r24, r30
 cc0:	11 24       	eor	r1, r1
 cc2:	08 95       	ret

00000cc4 <__prologue_saves__>:
 cc4:	2f 92       	push	r2
 cc6:	3f 92       	push	r3
 cc8:	4f 92       	push	r4
 cca:	5f 92       	push	r5
 ccc:	6f 92       	push	r6
 cce:	7f 92       	push	r7
 cd0:	8f 92       	push	r8
 cd2:	9f 92       	push	r9
 cd4:	af 92       	push	r10
 cd6:	bf 92       	push	r11
 cd8:	cf 92       	push	r12
 cda:	df 92       	push	r13
 cdc:	ef 92       	push	r14
 cde:	ff 92       	push	r15
 ce0:	0f 93       	push	r16
 ce2:	1f 93       	push	r17
 ce4:	cf 93       	push	r28
 ce6:	df 93       	push	r29
 ce8:	cd b7       	in	r28, 0x3d	; 61
 cea:	de b7       	in	r29, 0x3e	; 62
 cec:	ca 1b       	sub	r28, r26
 cee:	db 0b       	sbc	r29, r27
 cf0:	0f b6       	in	r0, 0x3f	; 63
 cf2:	f8 94       	cli
 cf4:	de bf       	out	0x3e, r29	; 62
 cf6:	0f be       	out	0x3f, r0	; 63
 cf8:	cd bf       	out	0x3d, r28	; 61
 cfa:	09 94       	ijmp

00000cfc <__epilogue_restores__>:
 cfc:	2a 88       	ldd	r2, Y+18	; 0x12
 cfe:	39 88       	ldd	r3, Y+17	; 0x11
 d00:	48 88       	ldd	r4, Y+16	; 0x10
 d02:	5f 84       	ldd	r5, Y+15	; 0x0f
 d04:	6e 84       	ldd	r6, Y+14	; 0x0e
 d06:	7d 84       	ldd	r7, Y+13	; 0x0d
 d08:	8c 84       	ldd	r8, Y+12	; 0x0c
 d0a:	9b 84       	ldd	r9, Y+11	; 0x0b
 d0c:	aa 84       	ldd	r10, Y+10	; 0x0a
 d0e:	b9 84       	ldd	r11, Y+9	; 0x09
 d10:	c8 84       	ldd	r12, Y+8	; 0x08
 d12:	df 80       	ldd	r13, Y+7	; 0x07
 d14:	ee 80       	ldd	r14, Y+6	; 0x06
 d16:	fd 80       	ldd	r15, Y+5	; 0x05
 d18:	0c 81       	ldd	r16, Y+4	; 0x04
 d1a:	1b 81       	ldd	r17, Y+3	; 0x03
 d1c:	aa 81       	ldd	r26, Y+2	; 0x02
 d1e:	b9 81       	ldd	r27, Y+1	; 0x01
 d20:	ce 0f       	add	r28, r30
 d22:	d1 1d       	adc	r29, r1
 d24:	0f b6       	in	r0, 0x3f	; 63
 d26:	f8 94       	cli
 d28:	de bf       	out	0x3e, r29	; 62
 d2a:	0f be       	out	0x3f, r0	; 63
 d2c:	cd bf       	out	0x3d, r28	; 61
 d2e:	ed 01       	movw	r28, r26
 d30:	08 95       	ret

00000d32 <__do_global_dtors>:
 d32:	10 e0       	ldi	r17, 0x00	; 0
 d34:	c4 ec       	ldi	r28, 0xC4	; 196
 d36:	d0 e0       	ldi	r29, 0x00	; 0
 d38:	04 c0       	rjmp	.+8      	; 0xd42 <.do_global_dtors_start>

00000d3a <.do_global_dtors_loop>:
 d3a:	fe 01       	movw	r30, r28
 d3c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__tablejump__>
 d40:	22 96       	adiw	r28, 0x02	; 2

00000d42 <.do_global_dtors_start>:
 d42:	c6 3c       	cpi	r28, 0xC6	; 198
 d44:	d1 07       	cpc	r29, r17
 d46:	c9 f7       	brne	.-14     	; 0xd3a <.do_global_dtors_loop>
 d48:	f8 94       	cli

00000d4a <__stop_program>:
 d4a:	ff cf       	rjmp	.-2      	; 0xd4a <__stop_program>
