
nixie-tube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000a8a  00000b1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080010e  0080010e  00000b2c  2**0
                  ALLOC
  3 .debug_aranges 000001f0  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000463  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018c8  00000000  00000000  0000117f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d2  00000000  00000000  00002a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012f2  00000000  00000000  00003319  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000300  00000000  00000000  0000460c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000723  00000000  00000000  0000490c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000be0  00000000  00000000  0000502f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b8  00000000  00000000  00005c0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

void NixieTube::putWord(byte index, word value)
{
	index %= _section_count;
	_buff[index] = value;
}
   0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__dtors_end>

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__vector_16>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
  68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
  72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
  7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
  86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
  9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
  ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
  be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
  c2:	07 03       	mulsu	r16, r23

000000c4 <__ctors_end>:
  c4:	00 03       	mulsu	r16, r16

000000c6 <__dtors_end>:
  c6:	11 24       	eor	r1, r1
  c8:	1f be       	out	0x3f, r1	; 63
  ca:	cf ef       	ldi	r28, 0xFF	; 255
  cc:	d4 e0       	ldi	r29, 0x04	; 4
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
  d2:	11 e0       	ldi	r17, 0x01	; 1
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	ea e8       	ldi	r30, 0x8A	; 138
  da:	fa e0       	ldi	r31, 0x0A	; 10
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <.do_copy_data_start>

000000de <.do_copy_data_loop>:
  de:	05 90       	lpm	r0, Z+
  e0:	0d 92       	st	X+, r0

000000e2 <.do_copy_data_start>:
  e2:	ae 30       	cpi	r26, 0x0E	; 14
  e4:	b1 07       	cpc	r27, r17
  e6:	d9 f7       	brne	.-10     	; 0xde <.do_copy_data_loop>

000000e8 <__do_clear_bss>:
  e8:	11 e0       	ldi	r17, 0x01	; 1
  ea:	ae e0       	ldi	r26, 0x0E	; 14
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
  f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
  f2:	a4 32       	cpi	r26, 0x24	; 36
  f4:	b1 07       	cpc	r27, r17
  f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	c4 ec       	ldi	r28, 0xC4	; 196
  fc:	d0 e0       	ldi	r29, 0x00	; 0
  fe:	04 c0       	rjmp	.+8      	; 0x108 <.do_global_ctors_start>

00000100 <.do_global_ctors_loop>:
 100:	22 97       	sbiw	r28, 0x02	; 2
 102:	fe 01       	movw	r30, r28
 104:	0e 94 34 05 	call	0xa68	; 0xa68 <__tablejump__>

00000108 <.do_global_ctors_start>:
 108:	c2 3c       	cpi	r28, 0xC2	; 194
 10a:	d1 07       	cpc	r29, r17
 10c:	c9 f7       	brne	.-14     	; 0x100 <.do_global_ctors_loop>
 10e:	0e 94 43 03 	call	0x686	; 0x686 <main>
 112:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__do_global_dtors>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <malloc>:
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	bc 01       	movw	r22, r24
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	91 05       	cpc	r25, r1
 124:	10 f4       	brcc	.+4      	; 0x12a <malloc+0x10>
 126:	62 e0       	ldi	r22, 0x02	; 2
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	a0 91 22 01 	lds	r26, 0x0122
 12e:	b0 91 23 01 	lds	r27, 0x0123
 132:	ed 01       	movw	r28, r26
 134:	e0 e0       	ldi	r30, 0x00	; 0
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	21 c0       	rjmp	.+66     	; 0x180 <malloc+0x66>
 13e:	88 81       	ld	r24, Y
 140:	99 81       	ldd	r25, Y+1	; 0x01
 142:	86 17       	cp	r24, r22
 144:	97 07       	cpc	r25, r23
 146:	69 f4       	brne	.+26     	; 0x162 <malloc+0x48>
 148:	8a 81       	ldd	r24, Y+2	; 0x02
 14a:	9b 81       	ldd	r25, Y+3	; 0x03
 14c:	30 97       	sbiw	r30, 0x00	; 0
 14e:	19 f0       	breq	.+6      	; 0x156 <malloc+0x3c>
 150:	93 83       	std	Z+3, r25	; 0x03
 152:	82 83       	std	Z+2, r24	; 0x02
 154:	04 c0       	rjmp	.+8      	; 0x15e <malloc+0x44>
 156:	90 93 23 01 	sts	0x0123, r25
 15a:	80 93 22 01 	sts	0x0122, r24
 15e:	fe 01       	movw	r30, r28
 160:	34 c0       	rjmp	.+104    	; 0x1ca <malloc+0xb0>
 162:	68 17       	cp	r22, r24
 164:	79 07       	cpc	r23, r25
 166:	38 f4       	brcc	.+14     	; 0x176 <malloc+0x5c>
 168:	41 15       	cp	r20, r1
 16a:	51 05       	cpc	r21, r1
 16c:	19 f0       	breq	.+6      	; 0x174 <malloc+0x5a>
 16e:	84 17       	cp	r24, r20
 170:	95 07       	cpc	r25, r21
 172:	08 f4       	brcc	.+2      	; 0x176 <malloc+0x5c>
 174:	ac 01       	movw	r20, r24
 176:	fe 01       	movw	r30, r28
 178:	8a 81       	ldd	r24, Y+2	; 0x02
 17a:	9b 81       	ldd	r25, Y+3	; 0x03
 17c:	9c 01       	movw	r18, r24
 17e:	e9 01       	movw	r28, r18
 180:	20 97       	sbiw	r28, 0x00	; 0
 182:	e9 f6       	brne	.-70     	; 0x13e <malloc+0x24>
 184:	41 15       	cp	r20, r1
 186:	51 05       	cpc	r21, r1
 188:	a9 f1       	breq	.+106    	; 0x1f4 <malloc+0xda>
 18a:	ca 01       	movw	r24, r20
 18c:	86 1b       	sub	r24, r22
 18e:	97 0b       	sbc	r25, r23
 190:	04 97       	sbiw	r24, 0x04	; 4
 192:	08 f4       	brcc	.+2      	; 0x196 <malloc+0x7c>
 194:	ba 01       	movw	r22, r20
 196:	e0 e0       	ldi	r30, 0x00	; 0
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	2a c0       	rjmp	.+84     	; 0x1f0 <malloc+0xd6>
 19c:	8d 91       	ld	r24, X+
 19e:	9c 91       	ld	r25, X
 1a0:	11 97       	sbiw	r26, 0x01	; 1
 1a2:	84 17       	cp	r24, r20
 1a4:	95 07       	cpc	r25, r21
 1a6:	f9 f4       	brne	.+62     	; 0x1e6 <malloc+0xcc>
 1a8:	64 17       	cp	r22, r20
 1aa:	75 07       	cpc	r23, r21
 1ac:	81 f4       	brne	.+32     	; 0x1ce <malloc+0xb4>
 1ae:	12 96       	adiw	r26, 0x02	; 2
 1b0:	8d 91       	ld	r24, X+
 1b2:	9c 91       	ld	r25, X
 1b4:	13 97       	sbiw	r26, 0x03	; 3
 1b6:	30 97       	sbiw	r30, 0x00	; 0
 1b8:	19 f0       	breq	.+6      	; 0x1c0 <malloc+0xa6>
 1ba:	93 83       	std	Z+3, r25	; 0x03
 1bc:	82 83       	std	Z+2, r24	; 0x02
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <malloc+0xae>
 1c0:	90 93 23 01 	sts	0x0123, r25
 1c4:	80 93 22 01 	sts	0x0122, r24
 1c8:	fd 01       	movw	r30, r26
 1ca:	32 96       	adiw	r30, 0x02	; 2
 1cc:	4c c0       	rjmp	.+152    	; 0x266 <malloc+0x14c>
 1ce:	ca 01       	movw	r24, r20
 1d0:	86 1b       	sub	r24, r22
 1d2:	97 0b       	sbc	r25, r23
 1d4:	fd 01       	movw	r30, r26
 1d6:	e8 0f       	add	r30, r24
 1d8:	f9 1f       	adc	r31, r25
 1da:	61 93       	st	Z+, r22
 1dc:	71 93       	st	Z+, r23
 1de:	02 97       	sbiw	r24, 0x02	; 2
 1e0:	8d 93       	st	X+, r24
 1e2:	9c 93       	st	X, r25
 1e4:	40 c0       	rjmp	.+128    	; 0x266 <malloc+0x14c>
 1e6:	fd 01       	movw	r30, r26
 1e8:	82 81       	ldd	r24, Z+2	; 0x02
 1ea:	93 81       	ldd	r25, Z+3	; 0x03
 1ec:	9c 01       	movw	r18, r24
 1ee:	d9 01       	movw	r26, r18
 1f0:	10 97       	sbiw	r26, 0x00	; 0
 1f2:	a1 f6       	brne	.-88     	; 0x19c <malloc+0x82>
 1f4:	80 91 20 01 	lds	r24, 0x0120
 1f8:	90 91 21 01 	lds	r25, 0x0121
 1fc:	89 2b       	or	r24, r25
 1fe:	41 f4       	brne	.+16     	; 0x210 <malloc+0xf6>
 200:	80 91 02 01 	lds	r24, 0x0102
 204:	90 91 03 01 	lds	r25, 0x0103
 208:	90 93 21 01 	sts	0x0121, r25
 20c:	80 93 20 01 	sts	0x0120, r24
 210:	40 91 04 01 	lds	r20, 0x0104
 214:	50 91 05 01 	lds	r21, 0x0105
 218:	41 15       	cp	r20, r1
 21a:	51 05       	cpc	r21, r1
 21c:	41 f4       	brne	.+16     	; 0x22e <malloc+0x114>
 21e:	4d b7       	in	r20, 0x3d	; 61
 220:	5e b7       	in	r21, 0x3e	; 62
 222:	80 91 00 01 	lds	r24, 0x0100
 226:	90 91 01 01 	lds	r25, 0x0101
 22a:	48 1b       	sub	r20, r24
 22c:	59 0b       	sbc	r21, r25
 22e:	20 91 20 01 	lds	r18, 0x0120
 232:	30 91 21 01 	lds	r19, 0x0121
 236:	ca 01       	movw	r24, r20
 238:	82 1b       	sub	r24, r18
 23a:	93 0b       	sbc	r25, r19
 23c:	86 17       	cp	r24, r22
 23e:	97 07       	cpc	r25, r23
 240:	80 f0       	brcs	.+32     	; 0x262 <malloc+0x148>
 242:	ab 01       	movw	r20, r22
 244:	4e 5f       	subi	r20, 0xFE	; 254
 246:	5f 4f       	sbci	r21, 0xFF	; 255
 248:	84 17       	cp	r24, r20
 24a:	95 07       	cpc	r25, r21
 24c:	50 f0       	brcs	.+20     	; 0x262 <malloc+0x148>
 24e:	42 0f       	add	r20, r18
 250:	53 1f       	adc	r21, r19
 252:	50 93 21 01 	sts	0x0121, r21
 256:	40 93 20 01 	sts	0x0120, r20
 25a:	f9 01       	movw	r30, r18
 25c:	61 93       	st	Z+, r22
 25e:	71 93       	st	Z+, r23
 260:	02 c0       	rjmp	.+4      	; 0x266 <malloc+0x14c>
 262:	e0 e0       	ldi	r30, 0x00	; 0
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	cf 01       	movw	r24, r30
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <free>:
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	00 97       	sbiw	r24, 0x00	; 0
 274:	09 f4       	brne	.+2      	; 0x278 <free+0xa>
 276:	50 c0       	rjmp	.+160    	; 0x318 <free+0xaa>
 278:	ec 01       	movw	r28, r24
 27a:	22 97       	sbiw	r28, 0x02	; 2
 27c:	1b 82       	std	Y+3, r1	; 0x03
 27e:	1a 82       	std	Y+2, r1	; 0x02
 280:	a0 91 22 01 	lds	r26, 0x0122
 284:	b0 91 23 01 	lds	r27, 0x0123
 288:	10 97       	sbiw	r26, 0x00	; 0
 28a:	09 f1       	breq	.+66     	; 0x2ce <free+0x60>
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	ac 17       	cp	r26, r28
 292:	bd 07       	cpc	r27, r29
 294:	08 f1       	brcs	.+66     	; 0x2d8 <free+0x6a>
 296:	bb 83       	std	Y+3, r27	; 0x03
 298:	aa 83       	std	Y+2, r26	; 0x02
 29a:	fe 01       	movw	r30, r28
 29c:	21 91       	ld	r18, Z+
 29e:	31 91       	ld	r19, Z+
 2a0:	e2 0f       	add	r30, r18
 2a2:	f3 1f       	adc	r31, r19
 2a4:	ae 17       	cp	r26, r30
 2a6:	bf 07       	cpc	r27, r31
 2a8:	79 f4       	brne	.+30     	; 0x2c8 <free+0x5a>
 2aa:	8d 91       	ld	r24, X+
 2ac:	9c 91       	ld	r25, X
 2ae:	11 97       	sbiw	r26, 0x01	; 1
 2b0:	28 0f       	add	r18, r24
 2b2:	39 1f       	adc	r19, r25
 2b4:	2e 5f       	subi	r18, 0xFE	; 254
 2b6:	3f 4f       	sbci	r19, 0xFF	; 255
 2b8:	39 83       	std	Y+1, r19	; 0x01
 2ba:	28 83       	st	Y, r18
 2bc:	12 96       	adiw	r26, 0x02	; 2
 2be:	8d 91       	ld	r24, X+
 2c0:	9c 91       	ld	r25, X
 2c2:	13 97       	sbiw	r26, 0x03	; 3
 2c4:	9b 83       	std	Y+3, r25	; 0x03
 2c6:	8a 83       	std	Y+2, r24	; 0x02
 2c8:	41 15       	cp	r20, r1
 2ca:	51 05       	cpc	r21, r1
 2cc:	71 f4       	brne	.+28     	; 0x2ea <free+0x7c>
 2ce:	d0 93 23 01 	sts	0x0123, r29
 2d2:	c0 93 22 01 	sts	0x0122, r28
 2d6:	20 c0       	rjmp	.+64     	; 0x318 <free+0xaa>
 2d8:	12 96       	adiw	r26, 0x02	; 2
 2da:	8d 91       	ld	r24, X+
 2dc:	9c 91       	ld	r25, X
 2de:	13 97       	sbiw	r26, 0x03	; 3
 2e0:	ad 01       	movw	r20, r26
 2e2:	00 97       	sbiw	r24, 0x00	; 0
 2e4:	11 f0       	breq	.+4      	; 0x2ea <free+0x7c>
 2e6:	dc 01       	movw	r26, r24
 2e8:	d3 cf       	rjmp	.-90     	; 0x290 <free+0x22>
 2ea:	fa 01       	movw	r30, r20
 2ec:	d3 83       	std	Z+3, r29	; 0x03
 2ee:	c2 83       	std	Z+2, r28	; 0x02
 2f0:	21 91       	ld	r18, Z+
 2f2:	31 91       	ld	r19, Z+
 2f4:	e2 0f       	add	r30, r18
 2f6:	f3 1f       	adc	r31, r19
 2f8:	ce 17       	cp	r28, r30
 2fa:	df 07       	cpc	r29, r31
 2fc:	69 f4       	brne	.+26     	; 0x318 <free+0xaa>
 2fe:	88 81       	ld	r24, Y
 300:	99 81       	ldd	r25, Y+1	; 0x01
 302:	28 0f       	add	r18, r24
 304:	39 1f       	adc	r19, r25
 306:	2e 5f       	subi	r18, 0xFE	; 254
 308:	3f 4f       	sbci	r19, 0xFF	; 255
 30a:	fa 01       	movw	r30, r20
 30c:	31 83       	std	Z+1, r19	; 0x01
 30e:	20 83       	st	Z, r18
 310:	8a 81       	ldd	r24, Y+2	; 0x02
 312:	9b 81       	ldd	r25, Y+3	; 0x03
 314:	93 83       	std	Z+3, r25	; 0x03
 316:	82 83       	std	Z+2, r24	; 0x02
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <_ZN9NixieTube5clearEj>:

void NixieTube::clear(word value)
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	ec 01       	movw	r28, r24
 328:	8b 01       	movw	r16, r22
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	0f c0       	rjmp	.+30     	; 0x34c <_ZN9NixieTube5clearEj+0x2e>
	digitalWrite(_pin_st, HIGH);
}

void NixieTube::putWord(byte index, word value)
{
	index %= _section_count;
 32e:	82 2f       	mov	r24, r18
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	0e 94 0b 05 	call	0xa16	; 0xa16 <__udivmodhi4>
	_buff[index] = value;
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	ea 81       	ldd	r30, Y+2	; 0x02
 340:	fb 81       	ldd	r31, Y+3	; 0x03
 342:	e8 0f       	add	r30, r24
 344:	f9 1f       	adc	r31, r25
 346:	11 83       	std	Z+1, r17	; 0x01
 348:	00 83       	st	Z, r16
}

void NixieTube::clear(word value)
{
	for (byte i = 0; i < _section_count; i++)
 34a:	2f 5f       	subi	r18, 0xFF	; 255
 34c:	6c 81       	ldd	r22, Y+4	; 0x04
 34e:	26 17       	cp	r18, r22
 350:	70 f3       	brcs	.-36     	; 0x32e <_ZN9NixieTube5clearEj+0x10>
		this->putWord(i, value);
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	08 95       	ret

0000035c <_ZN9NixieTube18setBackgroundColorEh5Color>:
	{
		this->setBackgroundColor(i, color);
	}
}

void NixieTube::setBackgroundColor(byte index, Color color)
 35c:	fc 01       	movw	r30, r24
 35e:	86 2f       	mov	r24, r22
{
	index %= _section_count;
 360:	64 81       	ldd	r22, Z+4	; 0x04
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	0e 94 0b 05 	call	0xa16	; 0xa16 <__udivmodhi4>
	_buff[index] &= 0x8fff;
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	02 80       	ldd	r0, Z+2	; 0x02
 372:	f3 81       	ldd	r31, Z+3	; 0x03
 374:	e0 2d       	mov	r30, r0
 376:	e8 0f       	add	r30, r24
 378:	f9 1f       	adc	r31, r25
 37a:	20 81       	ld	r18, Z
 37c:	31 81       	ldd	r19, Z+1	; 0x01
 37e:	3f 78       	andi	r19, 0x8F	; 143
	_buff[index] |= color << 12;
 380:	94 2f       	mov	r25, r20
 382:	92 95       	swap	r25
 384:	90 7f       	andi	r25, 0xF0	; 240
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	28 2b       	or	r18, r24
 38a:	39 2b       	or	r19, r25
 38c:	31 83       	std	Z+1, r19	; 0x01
 38e:	20 83       	st	Z, r18
}
 390:	08 95       	ret

00000392 <_ZN9NixieTube9setNumberEhh>:

void NixieTube::setNumber(byte index, byte num)
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
{
	_buff[index] &= 0xfc00;
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	66 0f       	add	r22, r22
 39a:	77 1f       	adc	r23, r23
 39c:	fc 01       	movw	r30, r24
 39e:	c2 81       	ldd	r28, Z+2	; 0x02
 3a0:	d3 81       	ldd	r29, Z+3	; 0x03
 3a2:	c6 0f       	add	r28, r22
 3a4:	d7 1f       	adc	r29, r23
 3a6:	e8 81       	ld	r30, Y
 3a8:	f9 81       	ldd	r31, Y+1	; 0x01
 3aa:	e0 70       	andi	r30, 0x00	; 0
 3ac:	fc 7f       	andi	r31, 0xFC	; 252
 3ae:	f9 83       	std	Y+1, r31	; 0x01
 3b0:	e8 83       	st	Y, r30

	if (num == 0xff)
 3b2:	4f 3f       	cpi	r20, 0xFF	; 255
 3b4:	91 f0       	breq	.+36     	; 0x3da <_ZN9NixieTube9setNumberEhh+0x48>
		return;

	num = (num + 9) % 10;
 3b6:	84 2f       	mov	r24, r20
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	09 96       	adiw	r24, 0x09	; 9
 3bc:	6a e0       	ldi	r22, 0x0A	; 10
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__divmodhi4>
	_buff[index] |= _BV(num);
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <_ZN9NixieTube9setNumberEhh+0x3c>
 3ca:	22 0f       	add	r18, r18
 3cc:	33 1f       	adc	r19, r19
 3ce:	8a 95       	dec	r24
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <_ZN9NixieTube9setNumberEhh+0x38>
 3d2:	e2 2b       	or	r30, r18
 3d4:	f3 2b       	or	r31, r19
 3d6:	f9 83       	std	Y+1, r31	; 0x01
 3d8:	e8 83       	st	Y, r30
}
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	08 95       	ret

000003e0 <_ZN9NixieTube8setColonEh5Colon>:
		this->setNumber(i, num);
}

void NixieTube::setColon(byte index, Colon colon)
{
	_buff[index] &= 0xf3ff;
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	66 0f       	add	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	dc 01       	movw	r26, r24
 3e8:	12 96       	adiw	r26, 0x02	; 2
 3ea:	ed 91       	ld	r30, X+
 3ec:	fc 91       	ld	r31, X
 3ee:	13 97       	sbiw	r26, 0x03	; 3
 3f0:	e6 0f       	add	r30, r22
 3f2:	f7 1f       	adc	r31, r23
 3f4:	20 81       	ld	r18, Z
 3f6:	31 81       	ldd	r19, Z+1	; 0x01
 3f8:	33 7f       	andi	r19, 0xF3	; 243
	_buff[index] |= colon << 10;
 3fa:	94 2f       	mov	r25, r20
 3fc:	99 0f       	add	r25, r25
 3fe:	99 0f       	add	r25, r25
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	28 2b       	or	r18, r24
 404:	39 2b       	or	r19, r25
 406:	31 83       	std	Z+1, r19	; 0x01
 408:	20 83       	st	Z, r18
}
 40a:	08 95       	ret

0000040c <_ZN9NixieTubeD1Ev>:
		digitalWrite(_pin_oe, brightness ? LOW : HIGH);
	else
		analogWrite(_pin_oe, 0xff - brightness);
}

NixieTube::~NixieTube()
 40c:	fc 01       	movw	r30, r24
 40e:	8a e0       	ldi	r24, 0x0A	; 10
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	91 83       	std	Z+1, r25	; 0x01
 414:	80 83       	st	Z, r24
{
	free(_buff);
 416:	82 81       	ldd	r24, Z+2	; 0x02
 418:	93 81       	ldd	r25, Z+3	; 0x03
 41a:	0e 94 37 01 	call	0x26e	; 0x26e <free>
}
 41e:	08 95       	ret

00000420 <_ZN9NixieTubeD0Ev>:
		digitalWrite(_pin_oe, brightness ? LOW : HIGH);
	else
		analogWrite(_pin_oe, 0xff - brightness);
}

NixieTube::~NixieTube()
 420:	0f 93       	push	r16
 422:	1f 93       	push	r17
 424:	8c 01       	movw	r16, r24
 426:	8a e0       	ldi	r24, 0x0A	; 10
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	f8 01       	movw	r30, r16
 42c:	91 83       	std	Z+1, r25	; 0x01
 42e:	80 83       	st	Z, r24
{
	free(_buff);
 430:	82 81       	ldd	r24, Z+2	; 0x02
 432:	93 81       	ldd	r25, Z+3	; 0x03
 434:	0e 94 37 01 	call	0x26e	; 0x26e <free>
}
 438:	c8 01       	movw	r24, r16
 43a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZdlPv>
 43e:	1f 91       	pop	r17
 440:	0f 91       	pop	r16
 442:	08 95       	ret

00000444 <_ZN9NixieTube4sendEh>:

	this->clear();

}

void NixieTube::send(byte data)
 444:	ef 92       	push	r14
 446:	ff 92       	push	r15
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	8c 01       	movw	r16, r24
 452:	c7 e0       	ldi	r28, 0x07	; 7
 454:	d0 e0       	ldi	r29, 0x00	; 0
{
	for (byte i = 8; i > 0; i--)
	{
		digitalWrite(_pin_dt, bitRead(data, i-1));
 456:	e6 2e       	mov	r14, r22
 458:	ff 24       	eor	r15, r15
 45a:	b7 01       	movw	r22, r14
 45c:	0c 2e       	mov	r0, r28
 45e:	02 c0       	rjmp	.+4      	; 0x464 <_ZN9NixieTube4sendEh+0x20>
 460:	75 95       	asr	r23
 462:	67 95       	ror	r22
 464:	0a 94       	dec	r0
 466:	e2 f7       	brpl	.-8      	; 0x460 <_ZN9NixieTube4sendEh+0x1c>
 468:	61 70       	andi	r22, 0x01	; 1
 46a:	f8 01       	movw	r30, r16
 46c:	85 81       	ldd	r24, Z+5	; 0x05
 46e:	0e 94 b7 04 	call	0x96e	; 0x96e <digitalWrite>
		digitalWrite(_pin_sh, LOW);
 472:	f8 01       	movw	r30, r16
 474:	87 81       	ldd	r24, Z+7	; 0x07
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	0e 94 b7 04 	call	0x96e	; 0x96e <digitalWrite>
		digitalWrite(_pin_sh, HIGH);
 47c:	f8 01       	movw	r30, r16
 47e:	87 81       	ldd	r24, Z+7	; 0x07
 480:	61 e0       	ldi	r22, 0x01	; 1
 482:	0e 94 b7 04 	call	0x96e	; 0x96e <digitalWrite>
 486:	21 97       	sbiw	r28, 0x01	; 1

}

void NixieTube::send(byte data)
{
	for (byte i = 8; i > 0; i--)
 488:	ff ef       	ldi	r31, 0xFF	; 255
 48a:	cf 3f       	cpi	r28, 0xFF	; 255
 48c:	df 07       	cpc	r29, r31
 48e:	29 f7       	brne	.-54     	; 0x45a <_ZN9NixieTube4sendEh+0x16>
	{
		digitalWrite(_pin_dt, bitRead(data, i-1));
		digitalWrite(_pin_sh, LOW);
		digitalWrite(_pin_sh, HIGH);
	}
}
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	ff 90       	pop	r15
 49a:	ef 90       	pop	r14
 49c:	08 95       	ret

0000049e <_ZN9NixieTube7displayEv>:

void NixieTube::display()
 49e:	cf 92       	push	r12
 4a0:	df 92       	push	r13
 4a2:	ff 92       	push	r15
 4a4:	0f 93       	push	r16
 4a6:	1f 93       	push	r17
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	ec 01       	movw	r28, r24
{
	for (byte i = _section_count; i > 0; i--)
 4ae:	fc 80       	ldd	r15, Y+4	; 0x04
	{
		this->send(highByte(_buff[i-1]));
 4b0:	71 e0       	ldi	r23, 0x01	; 1
 4b2:	c7 2e       	mov	r12, r23
 4b4:	d1 2c       	mov	r13, r1
 4b6:	19 c0       	rjmp	.+50     	; 0x4ea <_ZN9NixieTube7displayEv+0x4c>
 4b8:	86 01       	movw	r16, r12
 4ba:	0f 19       	sub	r16, r15
 4bc:	11 09       	sbc	r17, r1
 4be:	00 0f       	add	r16, r16
 4c0:	11 1f       	adc	r17, r17
 4c2:	10 95       	com	r17
 4c4:	01 95       	neg	r16
 4c6:	1f 4f       	sbci	r17, 0xFF	; 255
 4c8:	ea 81       	ldd	r30, Y+2	; 0x02
 4ca:	fb 81       	ldd	r31, Y+3	; 0x03
 4cc:	e0 0f       	add	r30, r16
 4ce:	f1 1f       	adc	r31, r17
 4d0:	61 81       	ldd	r22, Z+1	; 0x01
 4d2:	ce 01       	movw	r24, r28
 4d4:	0e 94 22 02 	call	0x444	; 0x444 <_ZN9NixieTube4sendEh>
		this->send(lowByte(_buff[i-1]));
 4d8:	ea 81       	ldd	r30, Y+2	; 0x02
 4da:	fb 81       	ldd	r31, Y+3	; 0x03
 4dc:	e0 0f       	add	r30, r16
 4de:	f1 1f       	adc	r31, r17
 4e0:	ce 01       	movw	r24, r28
 4e2:	60 81       	ld	r22, Z
 4e4:	0e 94 22 02 	call	0x444	; 0x444 <_ZN9NixieTube4sendEh>
	}
}

void NixieTube::display()
{
	for (byte i = _section_count; i > 0; i--)
 4e8:	fa 94       	dec	r15
 4ea:	ff 20       	and	r15, r15
 4ec:	29 f7       	brne	.-54     	; 0x4b8 <_ZN9NixieTube7displayEv+0x1a>
	{
		this->send(highByte(_buff[i-1]));
		this->send(lowByte(_buff[i-1]));
	}

	digitalWrite(_pin_st, LOW);
 4ee:	8e 81       	ldd	r24, Y+6	; 0x06
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	0e 94 b7 04 	call	0x96e	; 0x96e <digitalWrite>
	digitalWrite(_pin_st, HIGH);
 4f6:	8e 81       	ldd	r24, Y+6	; 0x06
 4f8:	61 e0       	ldi	r22, 0x01	; 1
 4fa:	0e 94 b7 04 	call	0x96e	; 0x96e <digitalWrite>
}
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	1f 91       	pop	r17
 504:	0f 91       	pop	r16
 506:	ff 90       	pop	r15
 508:	df 90       	pop	r13
 50a:	cf 90       	pop	r12
 50c:	08 95       	ret

0000050e <_ZN9NixieTube13setBrightnessEh>:
			this->setNumber(i, -1);
		value /= 10;
	}
}

void NixieTube::setBrightness(byte brightness)
 50e:	26 2f       	mov	r18, r22
{
	if (digitalPinToTimer(_pin_oe) == NOT_ON_TIMER)
 510:	fc 01       	movw	r30, r24
 512:	80 85       	ldd	r24, Z+8	; 0x08
 514:	e8 2f       	mov	r30, r24
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	e2 55       	subi	r30, 0x52	; 82
 51a:	ff 4f       	sbci	r31, 0xFF	; 255
 51c:	e4 91       	lpm	r30, Z+
 51e:	ee 23       	and	r30, r30
 520:	39 f4       	brne	.+14     	; 0x530 <_ZN9NixieTube13setBrightnessEh+0x22>
		digitalWrite(_pin_oe, brightness ? LOW : HIGH);
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	22 23       	and	r18, r18
 526:	09 f4       	brne	.+2      	; 0x52a <_ZN9NixieTube13setBrightnessEh+0x1c>
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	0e 94 b7 04 	call	0x96e	; 0x96e <digitalWrite>
 52e:	08 95       	ret
	else
		analogWrite(_pin_oe, 0xff - brightness);
 530:	6f ef       	ldi	r22, 0xFF	; 255
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	62 1b       	sub	r22, r18
 536:	71 09       	sbc	r23, r1
 538:	0e 94 31 04 	call	0x862	; 0x862 <analogWrite>
 53c:	08 95       	ret

0000053e <_ZN9NixieTubeC1Ehhhhh>:
 */

#include "NixieTube.h"

NixieTube::NixieTube(uint8_t pin_din, uint8_t pin_st, uint8_t pin_sh,
		uint8_t pin_oe, byte section_count)
 53e:	bf 92       	push	r11
 540:	cf 92       	push	r12
 542:	df 92       	push	r13
 544:	ef 92       	push	r14
 546:	ff 92       	push	r15
 548:	0f 93       	push	r16
 54a:	1f 93       	push	r17
 54c:	6c 01       	movw	r12, r24
 54e:	16 2f       	mov	r17, r22
 550:	f4 2e       	mov	r15, r20
 552:	b2 2e       	mov	r11, r18
 554:	8e 2d       	mov	r24, r14
 556:	2a e0       	ldi	r18, 0x0A	; 10
 558:	31 e0       	ldi	r19, 0x01	; 1
 55a:	f6 01       	movw	r30, r12
 55c:	31 83       	std	Z+1, r19	; 0x01
 55e:	20 83       	st	Z, r18
{
	_section_count = section_count;
 560:	e4 82       	std	Z+4, r14	; 0x04
	_buff = (word *) malloc(sizeof(word) * section_count);
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	0e 94 8d 00 	call	0x11a	; 0x11a <malloc>
 56c:	f6 01       	movw	r30, r12
 56e:	82 83       	std	Z+2, r24	; 0x02
 570:	93 83       	std	Z+3, r25	; 0x03

	_pin_dt = pin_din;
 572:	15 83       	std	Z+5, r17	; 0x05
	_pin_st = pin_st;
 574:	f6 82       	std	Z+6, r15	; 0x06
	_pin_sh = pin_sh;
 576:	b7 82       	std	Z+7, r11	; 0x07
	_pin_oe = pin_oe;
 578:	00 87       	std	Z+8, r16	; 0x08

	pinMode(_pin_dt, OUTPUT);
 57a:	81 2f       	mov	r24, r17
 57c:	61 e0       	ldi	r22, 0x01	; 1
 57e:	0e 94 91 04 	call	0x922	; 0x922 <pinMode>
	pinMode(_pin_st, OUTPUT);
 582:	f6 01       	movw	r30, r12
 584:	86 81       	ldd	r24, Z+6	; 0x06
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	0e 94 91 04 	call	0x922	; 0x922 <pinMode>
	pinMode(_pin_sh, OUTPUT);
 58c:	f6 01       	movw	r30, r12
 58e:	87 81       	ldd	r24, Z+7	; 0x07
 590:	61 e0       	ldi	r22, 0x01	; 1
 592:	0e 94 91 04 	call	0x922	; 0x922 <pinMode>
	pinMode(_pin_oe, OUTPUT);
 596:	f6 01       	movw	r30, r12
 598:	80 85       	ldd	r24, Z+8	; 0x08
 59a:	61 e0       	ldi	r22, 0x01	; 1
 59c:	0e 94 91 04 	call	0x922	; 0x922 <pinMode>

	this->setBrightness(0x40);
 5a0:	c6 01       	movw	r24, r12
 5a2:	60 e4       	ldi	r22, 0x40	; 64
 5a4:	0e 94 87 02 	call	0x50e	; 0x50e <_ZN9NixieTube13setBrightnessEh>

	this->clear();
 5a8:	c6 01       	movw	r24, r12
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	70 e7       	ldi	r23, 0x70	; 112
 5ae:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN9NixieTube5clearEj>

}
 5b2:	1f 91       	pop	r17
 5b4:	0f 91       	pop	r16
 5b6:	ff 90       	pop	r15
 5b8:	ef 90       	pop	r14
 5ba:	df 90       	pop	r13
 5bc:	cf 90       	pop	r12
 5be:	bf 90       	pop	r11
 5c0:	08 95       	ret

000005c2 <_Z41__static_initialization_and_destruction_0ii>:

void loop()
{
	delay(1000);
	tube.display();
}
 5c2:	ef 92       	push	r14
 5c4:	0f 93       	push	r16
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	91 05       	cpc	r25, r1
 5ca:	71 f4       	brne	.+28     	; 0x5e8 <_Z41__static_initialization_and_destruction_0ii+0x26>
 5cc:	6f 5f       	subi	r22, 0xFF	; 255
 5ce:	7f 4f       	sbci	r23, 0xFF	; 255
 5d0:	a1 f4       	brne	.+40     	; 0x5fa <_Z41__static_initialization_and_destruction_0ii+0x38>
#include "NixieTubeTest.h"
#include "NixieTube.h"

NixieTube tube(11, 12, 13, 10, 10);
 5d2:	8e e0       	ldi	r24, 0x0E	; 14
 5d4:	91 e0       	ldi	r25, 0x01	; 1
 5d6:	6b e0       	ldi	r22, 0x0B	; 11
 5d8:	4c e0       	ldi	r20, 0x0C	; 12
 5da:	2d e0       	ldi	r18, 0x0D	; 13
 5dc:	0a e0       	ldi	r16, 0x0A	; 10
 5de:	3a e0       	ldi	r19, 0x0A	; 10
 5e0:	e3 2e       	mov	r14, r19
 5e2:	0e 94 9f 02 	call	0x53e	; 0x53e <_ZN9NixieTubeC1Ehhhhh>
 5e6:	09 c0       	rjmp	.+18     	; 0x5fa <_Z41__static_initialization_and_destruction_0ii+0x38>
 5e8:	89 2b       	or	r24, r25
 5ea:	39 f4       	brne	.+14     	; 0x5fa <_Z41__static_initialization_and_destruction_0ii+0x38>
 5ec:	6f 5f       	subi	r22, 0xFF	; 255
 5ee:	7f 4f       	sbci	r23, 0xFF	; 255
 5f0:	21 f4       	brne	.+8      	; 0x5fa <_Z41__static_initialization_and_destruction_0ii+0x38>
 5f2:	8e e0       	ldi	r24, 0x0E	; 14
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	0e 94 06 02 	call	0x40c	; 0x40c <_ZN9NixieTubeD1Ev>

void loop()
{
	delay(1000);
	tube.display();
}
 5fa:	0f 91       	pop	r16
 5fc:	ef 90       	pop	r14
 5fe:	08 95       	ret

00000600 <_GLOBAL__D_tube>:
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	6f ef       	ldi	r22, 0xFF	; 255
 606:	7f ef       	ldi	r23, 0xFF	; 255
 608:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <_Z41__static_initialization_and_destruction_0ii>
 60c:	08 95       	ret

0000060e <_GLOBAL__I_tube>:
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	6f ef       	ldi	r22, 0xFF	; 255
 614:	7f ef       	ldi	r23, 0xFF	; 255
 616:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <_Z41__static_initialization_and_destruction_0ii>
 61a:	08 95       	ret

0000061c <loop>:
	tube.display();
}

void loop()
{
	delay(1000);
 61c:	68 ee       	ldi	r22, 0xE8	; 232
 61e:	73 e0       	ldi	r23, 0x03	; 3
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 9d 03 	call	0x73a	; 0x73a <delay>
	tube.display();
 628:	8e e0       	ldi	r24, 0x0E	; 14
 62a:	91 e0       	ldi	r25, 0x01	; 1
 62c:	0e 94 4f 02 	call	0x49e	; 0x49e <_ZN9NixieTube7displayEv>
}
 630:	08 95       	ret

00000632 <setup>:
#include "NixieTubeTest.h"
#include "NixieTube.h"

NixieTube tube(11, 12, 13, 10, 10);

void setup()
 632:	cf 93       	push	r28
 634:	df 93       	push	r29
{
	tube.setBrightness(0xf0);
 636:	8e e0       	ldi	r24, 0x0E	; 14
 638:	91 e0       	ldi	r25, 0x01	; 1
 63a:	60 ef       	ldi	r22, 0xF0	; 240
 63c:	0e 94 87 02 	call	0x50e	; 0x50e <_ZN9NixieTube13setBrightnessEh>
 640:	c0 e0       	ldi	r28, 0x00	; 0
 642:	d0 e0       	ldi	r29, 0x00	; 0

	for(byte i=0; i<10; i++)
	{
		tube.setBackgroundColor(i, (Color)(i%8));
 644:	ae 01       	movw	r20, r28
 646:	47 70       	andi	r20, 0x07	; 7
 648:	50 70       	andi	r21, 0x00	; 0
 64a:	8e e0       	ldi	r24, 0x0E	; 14
 64c:	91 e0       	ldi	r25, 0x01	; 1
 64e:	6c 2f       	mov	r22, r28
 650:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN9NixieTube18setBackgroundColorEh5Color>
		tube.setColon(i, (Colon)(i%4));
 654:	ae 01       	movw	r20, r28
 656:	43 70       	andi	r20, 0x03	; 3
 658:	50 70       	andi	r21, 0x00	; 0
 65a:	8e e0       	ldi	r24, 0x0E	; 14
 65c:	91 e0       	ldi	r25, 0x01	; 1
 65e:	6c 2f       	mov	r22, r28
 660:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN9NixieTube8setColonEh5Colon>
		tube.setNumber(i, i);
 664:	8e e0       	ldi	r24, 0x0E	; 14
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	6c 2f       	mov	r22, r28
 66a:	4c 2f       	mov	r20, r28
 66c:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN9NixieTube9setNumberEhh>
 670:	21 96       	adiw	r28, 0x01	; 1

void setup()
{
	tube.setBrightness(0xf0);

	for(byte i=0; i<10; i++)
 672:	ca 30       	cpi	r28, 0x0A	; 10
 674:	d1 05       	cpc	r29, r1
 676:	31 f7       	brne	.-52     	; 0x644 <setup+0x12>
	{
		tube.setBackgroundColor(i, (Color)(i%8));
		tube.setColon(i, (Colon)(i%4));
		tube.setNumber(i, i);
	}
	tube.display();
 678:	8e e0       	ldi	r24, 0x0E	; 14
 67a:	91 e0       	ldi	r25, 0x01	; 1
 67c:	0e 94 4f 02 	call	0x49e	; 0x49e <_ZN9NixieTube7displayEv>
}
 680:	df 91       	pop	r29
 682:	cf 91       	pop	r28
 684:	08 95       	ret

00000686 <main>:
#include <Arduino.h>

int main(void)
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
{
	init();
 68a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
 68e:	0e 94 19 03 	call	0x632	; 0x632 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 692:	c0 e0       	ldi	r28, 0x00	; 0
 694:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 696:	0e 94 0e 03 	call	0x61c	; 0x61c <loop>
		if (serialEventRun) serialEventRun();
 69a:	20 97       	sbiw	r28, 0x00	; 0
 69c:	e1 f3       	breq	.-8      	; 0x696 <main+0x10>
 69e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 6a2:	f9 cf       	rjmp	.-14     	; 0x696 <main+0x10>

000006a4 <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
 6a4:	0e 94 37 01 	call	0x26e	; 0x26e <free>
} 
 6a8:	08 95       	ret

000006aa <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
 6aa:	1f 92       	push	r1
 6ac:	0f 92       	push	r0
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	0f 92       	push	r0
 6b2:	11 24       	eor	r1, r1
 6b4:	2f 93       	push	r18
 6b6:	3f 93       	push	r19
 6b8:	8f 93       	push	r24
 6ba:	9f 93       	push	r25
 6bc:	af 93       	push	r26
 6be:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 6c0:	80 91 1b 01 	lds	r24, 0x011B
 6c4:	90 91 1c 01 	lds	r25, 0x011C
 6c8:	a0 91 1d 01 	lds	r26, 0x011D
 6cc:	b0 91 1e 01 	lds	r27, 0x011E
	unsigned char f = timer0_fract;
 6d0:	30 91 1f 01 	lds	r19, 0x011F

	m += MILLIS_INC;
 6d4:	01 96       	adiw	r24, 0x01	; 1
 6d6:	a1 1d       	adc	r26, r1
 6d8:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
 6da:	23 2f       	mov	r18, r19
 6dc:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
 6de:	2d 37       	cpi	r18, 0x7D	; 125
 6e0:	20 f0       	brcs	.+8      	; 0x6ea <__vector_16+0x40>
		f -= FRACT_MAX;
 6e2:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
 6e4:	01 96       	adiw	r24, 0x01	; 1
 6e6:	a1 1d       	adc	r26, r1
 6e8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 6ea:	20 93 1f 01 	sts	0x011F, r18
	timer0_millis = m;
 6ee:	80 93 1b 01 	sts	0x011B, r24
 6f2:	90 93 1c 01 	sts	0x011C, r25
 6f6:	a0 93 1d 01 	sts	0x011D, r26
 6fa:	b0 93 1e 01 	sts	0x011E, r27
	timer0_overflow_count++;
 6fe:	80 91 17 01 	lds	r24, 0x0117
 702:	90 91 18 01 	lds	r25, 0x0118
 706:	a0 91 19 01 	lds	r26, 0x0119
 70a:	b0 91 1a 01 	lds	r27, 0x011A
 70e:	01 96       	adiw	r24, 0x01	; 1
 710:	a1 1d       	adc	r26, r1
 712:	b1 1d       	adc	r27, r1
 714:	80 93 17 01 	sts	0x0117, r24
 718:	90 93 18 01 	sts	0x0118, r25
 71c:	a0 93 19 01 	sts	0x0119, r26
 720:	b0 93 1a 01 	sts	0x011A, r27
}
 724:	bf 91       	pop	r27
 726:	af 91       	pop	r26
 728:	9f 91       	pop	r25
 72a:	8f 91       	pop	r24
 72c:	3f 91       	pop	r19
 72e:	2f 91       	pop	r18
 730:	0f 90       	pop	r0
 732:	0f be       	out	0x3f, r0	; 63
 734:	0f 90       	pop	r0
 736:	1f 90       	pop	r1
 738:	18 95       	reti

0000073a <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
 73a:	9b 01       	movw	r18, r22
 73c:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 73e:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
 740:	f8 94       	cli
	m = timer0_overflow_count;
 742:	80 91 17 01 	lds	r24, 0x0117
 746:	90 91 18 01 	lds	r25, 0x0118
 74a:	a0 91 19 01 	lds	r26, 0x0119
 74e:	b0 91 1a 01 	lds	r27, 0x011A
#if defined(TCNT0)
	t = TCNT0;
 752:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 754:	a8 9b       	sbis	0x15, 0	; 21
 756:	05 c0       	rjmp	.+10     	; 0x762 <delay+0x28>
 758:	6f 3f       	cpi	r22, 0xFF	; 255
 75a:	19 f0       	breq	.+6      	; 0x762 <delay+0x28>
		m++;
 75c:	01 96       	adiw	r24, 0x01	; 1
 75e:	a1 1d       	adc	r26, r1
 760:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 762:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
 764:	ba 2f       	mov	r27, r26
 766:	a9 2f       	mov	r26, r25
 768:	98 2f       	mov	r25, r24
 76a:	88 27       	eor	r24, r24
 76c:	86 0f       	add	r24, r22
 76e:	91 1d       	adc	r25, r1
 770:	a1 1d       	adc	r26, r1
 772:	b1 1d       	adc	r27, r1
 774:	62 e0       	ldi	r22, 0x02	; 2
 776:	88 0f       	add	r24, r24
 778:	99 1f       	adc	r25, r25
 77a:	aa 1f       	adc	r26, r26
 77c:	bb 1f       	adc	r27, r27
 77e:	6a 95       	dec	r22
 780:	d1 f7       	brne	.-12     	; 0x776 <delay+0x3c>
 782:	bc 01       	movw	r22, r24
 784:	2d c0       	rjmp	.+90     	; 0x7e0 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 786:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
 788:	f8 94       	cli
	m = timer0_overflow_count;
 78a:	80 91 17 01 	lds	r24, 0x0117
 78e:	90 91 18 01 	lds	r25, 0x0118
 792:	a0 91 19 01 	lds	r26, 0x0119
 796:	b0 91 1a 01 	lds	r27, 0x011A
#if defined(TCNT0)
	t = TCNT0;
 79a:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 79c:	a8 9b       	sbis	0x15, 0	; 21
 79e:	05 c0       	rjmp	.+10     	; 0x7aa <delay+0x70>
 7a0:	ef 3f       	cpi	r30, 0xFF	; 255
 7a2:	19 f0       	breq	.+6      	; 0x7aa <delay+0x70>
		m++;
 7a4:	01 96       	adiw	r24, 0x01	; 1
 7a6:	a1 1d       	adc	r26, r1
 7a8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 7aa:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
 7ac:	ba 2f       	mov	r27, r26
 7ae:	a9 2f       	mov	r26, r25
 7b0:	98 2f       	mov	r25, r24
 7b2:	88 27       	eor	r24, r24
 7b4:	8e 0f       	add	r24, r30
 7b6:	91 1d       	adc	r25, r1
 7b8:	a1 1d       	adc	r26, r1
 7ba:	b1 1d       	adc	r27, r1
 7bc:	e2 e0       	ldi	r30, 0x02	; 2
 7be:	88 0f       	add	r24, r24
 7c0:	99 1f       	adc	r25, r25
 7c2:	aa 1f       	adc	r26, r26
 7c4:	bb 1f       	adc	r27, r27
 7c6:	ea 95       	dec	r30
 7c8:	d1 f7       	brne	.-12     	; 0x7be <delay+0x84>
 7ca:	86 1b       	sub	r24, r22
 7cc:	97 0b       	sbc	r25, r23
 7ce:	88 5e       	subi	r24, 0xE8	; 232
 7d0:	93 40       	sbci	r25, 0x03	; 3
 7d2:	c8 f2       	brcs	.-78     	; 0x786 <delay+0x4c>
			ms--;
 7d4:	21 50       	subi	r18, 0x01	; 1
 7d6:	30 40       	sbci	r19, 0x00	; 0
 7d8:	40 40       	sbci	r20, 0x00	; 0
 7da:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
 7dc:	68 51       	subi	r22, 0x18	; 24
 7de:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 7e0:	21 15       	cp	r18, r1
 7e2:	31 05       	cpc	r19, r1
 7e4:	41 05       	cpc	r20, r1
 7e6:	51 05       	cpc	r21, r1
 7e8:	71 f6       	brne	.-100    	; 0x786 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 7ea:	08 95       	ret

000007ec <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 7ec:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 7ee:	84 b5       	in	r24, 0x24	; 36
 7f0:	82 60       	ori	r24, 0x02	; 2
 7f2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 7f4:	84 b5       	in	r24, 0x24	; 36
 7f6:	81 60       	ori	r24, 0x01	; 1
 7f8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 7fa:	85 b5       	in	r24, 0x25	; 37
 7fc:	82 60       	ori	r24, 0x02	; 2
 7fe:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 800:	85 b5       	in	r24, 0x25	; 37
 802:	81 60       	ori	r24, 0x01	; 1
 804:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 806:	ee e6       	ldi	r30, 0x6E	; 110
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	80 81       	ld	r24, Z
 80c:	81 60       	ori	r24, 0x01	; 1
 80e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 810:	e1 e8       	ldi	r30, 0x81	; 129
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 816:	80 81       	ld	r24, Z
 818:	82 60       	ori	r24, 0x02	; 2
 81a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 81c:	80 81       	ld	r24, Z
 81e:	81 60       	ori	r24, 0x01	; 1
 820:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 822:	e0 e8       	ldi	r30, 0x80	; 128
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	80 81       	ld	r24, Z
 828:	81 60       	ori	r24, 0x01	; 1
 82a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 82c:	e1 eb       	ldi	r30, 0xB1	; 177
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	80 81       	ld	r24, Z
 832:	84 60       	ori	r24, 0x04	; 4
 834:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 836:	e0 eb       	ldi	r30, 0xB0	; 176
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	80 81       	ld	r24, Z
 83c:	81 60       	ori	r24, 0x01	; 1
 83e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 840:	ea e7       	ldi	r30, 0x7A	; 122
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	80 81       	ld	r24, Z
 846:	84 60       	ori	r24, 0x04	; 4
 848:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 84a:	80 81       	ld	r24, Z
 84c:	82 60       	ori	r24, 0x02	; 2
 84e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 850:	80 81       	ld	r24, Z
 852:	81 60       	ori	r24, 0x01	; 1
 854:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 856:	80 81       	ld	r24, Z
 858:	80 68       	ori	r24, 0x80	; 128
 85a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 85c:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 860:	08 95       	ret

00000862 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
 862:	1f 93       	push	r17
 864:	cf 93       	push	r28
 866:	df 93       	push	r29
 868:	18 2f       	mov	r17, r24
 86a:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
 86c:	61 e0       	ldi	r22, 0x01	; 1
 86e:	0e 94 91 04 	call	0x922	; 0x922 <pinMode>
	if (val == 0)
 872:	20 97       	sbiw	r28, 0x00	; 0
 874:	09 f4       	brne	.+2      	; 0x878 <analogWrite+0x16>
 876:	4a c0       	rjmp	.+148    	; 0x90c <analogWrite+0xaa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
 878:	cf 3f       	cpi	r28, 0xFF	; 255
 87a:	d1 05       	cpc	r29, r1
 87c:	09 f4       	brne	.+2      	; 0x880 <analogWrite+0x1e>
 87e:	49 c0       	rjmp	.+146    	; 0x912 <analogWrite+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
 880:	e1 2f       	mov	r30, r17
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	e2 55       	subi	r30, 0x52	; 82
 886:	ff 4f       	sbci	r31, 0xFF	; 255
 888:	84 91       	lpm	r24, Z+
 88a:	83 30       	cpi	r24, 0x03	; 3
 88c:	c1 f0       	breq	.+48     	; 0x8be <analogWrite+0x5c>
 88e:	84 30       	cpi	r24, 0x04	; 4
 890:	28 f4       	brcc	.+10     	; 0x89c <analogWrite+0x3a>
 892:	81 30       	cpi	r24, 0x01	; 1
 894:	51 f0       	breq	.+20     	; 0x8aa <analogWrite+0x48>
 896:	82 30       	cpi	r24, 0x02	; 2
 898:	b1 f5       	brne	.+108    	; 0x906 <analogWrite+0xa4>
 89a:	0c c0       	rjmp	.+24     	; 0x8b4 <analogWrite+0x52>
 89c:	86 30       	cpi	r24, 0x06	; 6
 89e:	19 f1       	breq	.+70     	; 0x8e6 <analogWrite+0x84>
 8a0:	87 30       	cpi	r24, 0x07	; 7
 8a2:	49 f1       	breq	.+82     	; 0x8f6 <analogWrite+0x94>
 8a4:	84 30       	cpi	r24, 0x04	; 4
 8a6:	79 f5       	brne	.+94     	; 0x906 <analogWrite+0xa4>
 8a8:	14 c0       	rjmp	.+40     	; 0x8d2 <analogWrite+0x70>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
 8aa:	84 b5       	in	r24, 0x24	; 36
 8ac:	80 68       	ori	r24, 0x80	; 128
 8ae:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
 8b0:	c7 bd       	out	0x27, r28	; 39
 8b2:	33 c0       	rjmp	.+102    	; 0x91a <analogWrite+0xb8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
 8b4:	84 b5       	in	r24, 0x24	; 36
 8b6:	80 62       	ori	r24, 0x20	; 32
 8b8:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
 8ba:	c8 bd       	out	0x28, r28	; 40
 8bc:	2e c0       	rjmp	.+92     	; 0x91a <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
 8be:	80 91 80 00 	lds	r24, 0x0080
 8c2:	80 68       	ori	r24, 0x80	; 128
 8c4:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
 8c8:	d0 93 89 00 	sts	0x0089, r29
 8cc:	c0 93 88 00 	sts	0x0088, r28
 8d0:	24 c0       	rjmp	.+72     	; 0x91a <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
 8d2:	80 91 80 00 	lds	r24, 0x0080
 8d6:	80 62       	ori	r24, 0x20	; 32
 8d8:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
 8dc:	d0 93 8b 00 	sts	0x008B, r29
 8e0:	c0 93 8a 00 	sts	0x008A, r28
 8e4:	1a c0       	rjmp	.+52     	; 0x91a <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
 8e6:	80 91 b0 00 	lds	r24, 0x00B0
 8ea:	80 68       	ori	r24, 0x80	; 128
 8ec:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
 8f0:	c0 93 b3 00 	sts	0x00B3, r28
 8f4:	12 c0       	rjmp	.+36     	; 0x91a <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
 8f6:	80 91 b0 00 	lds	r24, 0x00B0
 8fa:	80 62       	ori	r24, 0x20	; 32
 8fc:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
 900:	c0 93 b4 00 	sts	0x00B4, r28
 904:	0a c0       	rjmp	.+20     	; 0x91a <analogWrite+0xb8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
 906:	c0 38       	cpi	r28, 0x80	; 128
 908:	d1 05       	cpc	r29, r1
 90a:	1c f4       	brge	.+6      	; 0x912 <analogWrite+0xb0>
					digitalWrite(pin, LOW);
 90c:	81 2f       	mov	r24, r17
 90e:	60 e0       	ldi	r22, 0x00	; 0
 910:	02 c0       	rjmp	.+4      	; 0x916 <analogWrite+0xb4>
				} else {
					digitalWrite(pin, HIGH);
 912:	81 2f       	mov	r24, r17
 914:	61 e0       	ldi	r22, 0x01	; 1
 916:	0e 94 b7 04 	call	0x96e	; 0x96e <digitalWrite>
				}
				break;
		}
	}
}
 91a:	df 91       	pop	r29
 91c:	cf 91       	pop	r28
 91e:	1f 91       	pop	r17
 920:	08 95       	ret

00000922 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 922:	48 2f       	mov	r20, r24
 924:	50 e0       	ldi	r21, 0x00	; 0
 926:	ca 01       	movw	r24, r20
 928:	86 56       	subi	r24, 0x66	; 102
 92a:	9f 4f       	sbci	r25, 0xFF	; 255
 92c:	fc 01       	movw	r30, r24
 92e:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
 930:	4a 57       	subi	r20, 0x7A	; 122
 932:	5f 4f       	sbci	r21, 0xFF	; 255
 934:	fa 01       	movw	r30, r20
 936:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
 938:	88 23       	and	r24, r24
 93a:	c1 f0       	breq	.+48     	; 0x96c <pinMode+0x4a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 93c:	e8 2f       	mov	r30, r24
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	ee 0f       	add	r30, r30
 942:	ff 1f       	adc	r31, r31
 944:	e8 59       	subi	r30, 0x98	; 152
 946:	ff 4f       	sbci	r31, 0xFF	; 255
 948:	a5 91       	lpm	r26, Z+
 94a:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
 94c:	66 23       	and	r22, r22
 94e:	41 f4       	brne	.+16     	; 0x960 <pinMode+0x3e>
		uint8_t oldSREG = SREG;
 950:	9f b7       	in	r25, 0x3f	; 63
                cli();
 952:	f8 94       	cli
		*reg &= ~bit;
 954:	8c 91       	ld	r24, X
 956:	20 95       	com	r18
 958:	82 23       	and	r24, r18
 95a:	8c 93       	st	X, r24
		SREG = oldSREG;
 95c:	9f bf       	out	0x3f, r25	; 63
 95e:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
 960:	9f b7       	in	r25, 0x3f	; 63
                cli();
 962:	f8 94       	cli
		*reg |= bit;
 964:	8c 91       	ld	r24, X
 966:	82 2b       	or	r24, r18
 968:	8c 93       	st	X, r24
		SREG = oldSREG;
 96a:	9f bf       	out	0x3f, r25	; 63
 96c:	08 95       	ret

0000096e <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
 96e:	48 2f       	mov	r20, r24
 970:	50 e0       	ldi	r21, 0x00	; 0
 972:	ca 01       	movw	r24, r20
 974:	82 55       	subi	r24, 0x52	; 82
 976:	9f 4f       	sbci	r25, 0xFF	; 255
 978:	fc 01       	movw	r30, r24
 97a:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
 97c:	ca 01       	movw	r24, r20
 97e:	86 56       	subi	r24, 0x66	; 102
 980:	9f 4f       	sbci	r25, 0xFF	; 255
 982:	fc 01       	movw	r30, r24
 984:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
 986:	4a 57       	subi	r20, 0x7A	; 122
 988:	5f 4f       	sbci	r21, 0xFF	; 255
 98a:	fa 01       	movw	r30, r20
 98c:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 98e:	33 23       	and	r19, r19
 990:	09 f4       	brne	.+2      	; 0x994 <digitalWrite+0x26>
 992:	40 c0       	rjmp	.+128    	; 0xa14 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 994:	22 23       	and	r18, r18
 996:	51 f1       	breq	.+84     	; 0x9ec <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 998:	23 30       	cpi	r18, 0x03	; 3
 99a:	71 f0       	breq	.+28     	; 0x9b8 <digitalWrite+0x4a>
 99c:	24 30       	cpi	r18, 0x04	; 4
 99e:	28 f4       	brcc	.+10     	; 0x9aa <digitalWrite+0x3c>
 9a0:	21 30       	cpi	r18, 0x01	; 1
 9a2:	a1 f0       	breq	.+40     	; 0x9cc <digitalWrite+0x5e>
 9a4:	22 30       	cpi	r18, 0x02	; 2
 9a6:	11 f5       	brne	.+68     	; 0x9ec <digitalWrite+0x7e>
 9a8:	14 c0       	rjmp	.+40     	; 0x9d2 <digitalWrite+0x64>
 9aa:	26 30       	cpi	r18, 0x06	; 6
 9ac:	b1 f0       	breq	.+44     	; 0x9da <digitalWrite+0x6c>
 9ae:	27 30       	cpi	r18, 0x07	; 7
 9b0:	c1 f0       	breq	.+48     	; 0x9e2 <digitalWrite+0x74>
 9b2:	24 30       	cpi	r18, 0x04	; 4
 9b4:	d9 f4       	brne	.+54     	; 0x9ec <digitalWrite+0x7e>
 9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 9b8:	80 91 80 00 	lds	r24, 0x0080
 9bc:	8f 77       	andi	r24, 0x7F	; 127
 9be:	03 c0       	rjmp	.+6      	; 0x9c6 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 9c0:	80 91 80 00 	lds	r24, 0x0080
 9c4:	8f 7d       	andi	r24, 0xDF	; 223
 9c6:	80 93 80 00 	sts	0x0080, r24
 9ca:	10 c0       	rjmp	.+32     	; 0x9ec <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 9cc:	84 b5       	in	r24, 0x24	; 36
 9ce:	8f 77       	andi	r24, 0x7F	; 127
 9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 9d2:	84 b5       	in	r24, 0x24	; 36
 9d4:	8f 7d       	andi	r24, 0xDF	; 223
 9d6:	84 bd       	out	0x24, r24	; 36
 9d8:	09 c0       	rjmp	.+18     	; 0x9ec <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 9da:	80 91 b0 00 	lds	r24, 0x00B0
 9de:	8f 77       	andi	r24, 0x7F	; 127
 9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 9e2:	80 91 b0 00 	lds	r24, 0x00B0
 9e6:	8f 7d       	andi	r24, 0xDF	; 223
 9e8:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 9ec:	e3 2f       	mov	r30, r19
 9ee:	f0 e0       	ldi	r31, 0x00	; 0
 9f0:	ee 0f       	add	r30, r30
 9f2:	ff 1f       	adc	r31, r31
 9f4:	ee 58       	subi	r30, 0x8E	; 142
 9f6:	ff 4f       	sbci	r31, 0xFF	; 255
 9f8:	a5 91       	lpm	r26, Z+
 9fa:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
 9fc:	2f b7       	in	r18, 0x3f	; 63
	cli();
 9fe:	f8 94       	cli

	if (val == LOW) {
 a00:	66 23       	and	r22, r22
 a02:	21 f4       	brne	.+8      	; 0xa0c <digitalWrite+0x9e>
		*out &= ~bit;
 a04:	8c 91       	ld	r24, X
 a06:	90 95       	com	r25
 a08:	89 23       	and	r24, r25
 a0a:	02 c0       	rjmp	.+4      	; 0xa10 <digitalWrite+0xa2>
	} else {
		*out |= bit;
 a0c:	8c 91       	ld	r24, X
 a0e:	89 2b       	or	r24, r25
 a10:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
 a12:	2f bf       	out	0x3f, r18	; 63
 a14:	08 95       	ret

00000a16 <__udivmodhi4>:
 a16:	aa 1b       	sub	r26, r26
 a18:	bb 1b       	sub	r27, r27
 a1a:	51 e1       	ldi	r21, 0x11	; 17
 a1c:	07 c0       	rjmp	.+14     	; 0xa2c <__udivmodhi4_ep>

00000a1e <__udivmodhi4_loop>:
 a1e:	aa 1f       	adc	r26, r26
 a20:	bb 1f       	adc	r27, r27
 a22:	a6 17       	cp	r26, r22
 a24:	b7 07       	cpc	r27, r23
 a26:	10 f0       	brcs	.+4      	; 0xa2c <__udivmodhi4_ep>
 a28:	a6 1b       	sub	r26, r22
 a2a:	b7 0b       	sbc	r27, r23

00000a2c <__udivmodhi4_ep>:
 a2c:	88 1f       	adc	r24, r24
 a2e:	99 1f       	adc	r25, r25
 a30:	5a 95       	dec	r21
 a32:	a9 f7       	brne	.-22     	; 0xa1e <__udivmodhi4_loop>
 a34:	80 95       	com	r24
 a36:	90 95       	com	r25
 a38:	bc 01       	movw	r22, r24
 a3a:	cd 01       	movw	r24, r26
 a3c:	08 95       	ret

00000a3e <__divmodhi4>:
 a3e:	97 fb       	bst	r25, 7
 a40:	09 2e       	mov	r0, r25
 a42:	07 26       	eor	r0, r23
 a44:	0a d0       	rcall	.+20     	; 0xa5a <__divmodhi4_neg1>
 a46:	77 fd       	sbrc	r23, 7
 a48:	04 d0       	rcall	.+8      	; 0xa52 <__divmodhi4_neg2>
 a4a:	e5 df       	rcall	.-54     	; 0xa16 <__udivmodhi4>
 a4c:	06 d0       	rcall	.+12     	; 0xa5a <__divmodhi4_neg1>
 a4e:	00 20       	and	r0, r0
 a50:	1a f4       	brpl	.+6      	; 0xa58 <__divmodhi4_exit>

00000a52 <__divmodhi4_neg2>:
 a52:	70 95       	com	r23
 a54:	61 95       	neg	r22
 a56:	7f 4f       	sbci	r23, 0xFF	; 255

00000a58 <__divmodhi4_exit>:
 a58:	08 95       	ret

00000a5a <__divmodhi4_neg1>:
 a5a:	f6 f7       	brtc	.-4      	; 0xa58 <__divmodhi4_exit>
 a5c:	90 95       	com	r25
 a5e:	81 95       	neg	r24
 a60:	9f 4f       	sbci	r25, 0xFF	; 255
 a62:	08 95       	ret

00000a64 <__tablejump2__>:
 a64:	ee 0f       	add	r30, r30
 a66:	ff 1f       	adc	r31, r31

00000a68 <__tablejump__>:
 a68:	05 90       	lpm	r0, Z+
 a6a:	f4 91       	lpm	r31, Z+
 a6c:	e0 2d       	mov	r30, r0
 a6e:	09 94       	ijmp

00000a70 <__do_global_dtors>:
 a70:	10 e0       	ldi	r17, 0x00	; 0
 a72:	c4 ec       	ldi	r28, 0xC4	; 196
 a74:	d0 e0       	ldi	r29, 0x00	; 0
 a76:	04 c0       	rjmp	.+8      	; 0xa80 <.do_global_dtors_start>

00000a78 <.do_global_dtors_loop>:
 a78:	fe 01       	movw	r30, r28
 a7a:	0e 94 34 05 	call	0xa68	; 0xa68 <__tablejump__>
 a7e:	22 96       	adiw	r28, 0x02	; 2

00000a80 <.do_global_dtors_start>:
 a80:	c6 3c       	cpi	r28, 0xC6	; 198
 a82:	d1 07       	cpc	r29, r17
 a84:	c9 f7       	brne	.-14     	; 0xa78 <.do_global_dtors_loop>
 a86:	f8 94       	cli

00000a88 <__stop_program>:
 a88:	ff cf       	rjmp	.-2      	; 0xa88 <__stop_program>
